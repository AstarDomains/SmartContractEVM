{
  "address": "0xaa74D98cFC714F731919F965Ea6dD8D6642676Bd",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "keyIndex",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "NewKey",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "NewURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ResetRecords",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "keyIndex",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "valueIndex",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "name": "Set",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_saleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        }
      ],
      "name": "addKey",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "sub",
          "type": "string"
        }
      ],
      "name": "burnSubDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tld",
          "type": "string"
        }
      ],
      "name": "buyDomain",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "genTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "get",
      "outputs": [
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get3charTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get4charTimes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "keyHash",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getByHash",
      "outputs": [
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getDomainbyAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "domains",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "keyHash",
          "type": "uint256"
        }
      ],
      "name": "getKey",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "hashes",
          "type": "uint256[]"
        }
      ],
      "name": "getKeys",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "values",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "keys",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getMany",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "values",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "keyHashes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getManyByHash",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "keys",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "values",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice3Char",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice4Char",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tld",
          "type": "string"
        }
      ],
      "name": "isTLD",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "keys",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "values",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "reconfigure",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "tld",
          "type": "string"
        }
      ],
      "name": "registerDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "sub",
          "type": "string"
        }
      ],
      "name": "registerSubDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeReverse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "reset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "reverseOf",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "key",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "keyHash",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "value",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setByHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "keys",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "values",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setMany",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "keyHashes",
          "type": "uint256[]"
        },
        {
          "internalType": "string[]",
          "name": "values",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setManyByHash",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setReverse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "name": "setReverse",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSaleState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tld",
          "type": "string"
        }
      ],
      "name": "setTLD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "__3chartime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "__4chartime",
          "type": "uint256"
        }
      ],
      "name": "setTimes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "subTokenIdByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "subTokenIdCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x29c5037223cf34beac08b7b2a9f0b48a864d41f1321a0531c63fafb19b4d5ffe",
  "receipt": {
    "to": null,
    "from": "0x3b946C2C84a316Fe8821D1662b83AF5521537943",
    "contractAddress": "0xaa74D98cFC714F731919F965Ea6dD8D6642676Bd",
    "transactionIndex": 0,
    "gasUsed": "4522024",
    "logsBloom": "0x
    "blockHash": "0xf424bb3b1cc0f39d06996c63285b50a1c5587d6163116bf9e242d28b84921a91",
    "transactionHash": "0x29c5037223cf34beac08b7b2a9f0b48a864d41f1321a0531c63fafb19b4d5ffe",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1045272,
        "transactionHash": "0x29c5037223cf34beac08b7b2a9f0b48a864d41f1321a0531c63fafb19b4d5ffe",
        "address": "0xaa74D98cFC714F731919F965Ea6dD8D6642676Bd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003b946c2c84a316fe8821d1662b83af5521537943"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf424bb3b1cc0f39d06996c63285b50a1c5587d6163116bf9e242d28b84921a91"
      }
    ],
    "blockNumber": 1045272,
    "cumulativeGasUsed": "4522024",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "12d62121f4714badea520a81a9d2d191",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"keyIndex\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"NewKey\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"NewURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ResetRecords\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"keyIndex\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"valueIndex\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"name\":\"Set\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"}],\"name\":\"addKey\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"sub\",\"type\":\"string\"}],\"name\":\"burnSubDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tld\",\"type\":\"string\"}],\"name\":\"buyDomain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"genTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"get\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get3charTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get4charTimes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getByHash\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getDomainbyAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"domains\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyHash\",\"type\":\"uint256\"}],\"name\":\"getKey\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"hashes\",\"type\":\"uint256[]\"}],\"name\":\"getKeys\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getMany\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"keyHashes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getManyByHash\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice3Char\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice4Char\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tld\",\"type\":\"string\"}],\"name\":\"isTLD\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"reconfigure\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tld\",\"type\":\"string\"}],\"name\":\"registerDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"sub\",\"type\":\"string\"}],\"name\":\"registerSubDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeReverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"reset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"reverseOf\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"keyHash\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setByHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"keys\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setMany\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"keyHashes\",\"type\":\"uint256[]\"},{\"internalType\":\"string[]\",\"name\":\"values\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setManyByHash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setReverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"setReverse\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tld\",\"type\":\"string\"}],\"name\":\"setTLD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"__3chartime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"__4chartime\",\"type\":\"uint256\"}],\"name\":\"setTimes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"subTokenIdByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"subTokenIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"get(string,uint256)\":{\"details\":\"Function to get record.\",\"params\":{\"key\":\"The key to query the value of.\",\"tokenId\":\"The token id to fetch.\"},\"returns\":{\"value\":\"The value string.\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getByHash(uint256,uint256)\":{\"details\":\"Function get value by provied key hash.\",\"params\":{\"keyHash\":\"The key to query the value of.\",\"tokenId\":\"The token id to set.\"}},\"getMany(string[],uint256)\":{\"details\":\"Function to get multiple record.\",\"params\":{\"keys\":\"The keys to query the value of.\",\"tokenId\":\"The token id to fetch.\"},\"returns\":{\"values\":\"The values.\"}},\"getManyByHash(uint256[],uint256)\":{\"details\":\"Function get values by provied key hashes.\",\"params\":{\"keyHashes\":\"The key to query the value of.\",\"tokenId\":\"The token id to set.\"}},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"reconfigure(string[],string[],uint256)\":{\"details\":\"Reset all domain records and set new ones\",\"params\":{\"keys\":\"New record keys\",\"tokenId\":\"ERC-721 token id of the domain\",\"values\":\"New record values\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"reset(uint256)\":{\"details\":\"Function to reset all existing records on a domain.\",\"params\":{\"tokenId\":\"ERC-721 token id to set.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"setByHash(uint256,string,uint256)\":{\"details\":\"Set record by key hash\",\"params\":{\"keyHash\":\"The key hash set the value of\",\"tokenId\":\"ERC-721 token id to set\",\"value\":\"The value to set key to\"}},\"setMany(string[],string[],uint256)\":{\"details\":\"Set records by keys\",\"params\":{\"keys\":\"The keys set the values of\",\"tokenId\":\"ERC-721 token id of the domain\",\"values\":\"Records values\"}},\"setManyByHash(uint256[],string[],uint256)\":{\"details\":\"Set records by key hashes\",\"params\":{\"keyHashes\":\"The key hashes set the values of\",\"tokenId\":\"ERC-721 token id of the domain\",\"values\":\"Records values\"}},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"registerSubDomain(address,uint256,string)\":{\"notice\":\"End: set and get Reverses\"},\"reverseOf(address)\":{\"notice\":\"Begin: set and get Reverses\"},\"set(string,string,uint256)\":{\"notice\":\"Begin: working with metadata like: avatar, cover, email, phone, address, social ...\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Web3Domains.sol\":\"Web3Domains\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/Web3Domains.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n */\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 => uint256) private _allTokensIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            _addTokenToAllTokensEnumeration(tokenId);\\r\\n        } else if (from != to) {\\r\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n        } else if (to != from) {\\r\\n            _addTokenToOwnerEnumeration(to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        uint256 length = ERC721.balanceOf(to);\\r\\n        _ownedTokens[to][length] = tokenId;\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _ownedTokensIndex[tokenId];\\r\\n        delete _ownedTokens[from][lastTokenIndex];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _allTokensIndex[tokenId];\\r\\n        _allTokens.pop();\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address => bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account's access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract AdminControl is Ownable {\\r\\n\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    Roles.Role private _controllerRoles;\\r\\n\\r\\n\\r\\n    modifier onlyMinterController() {\\r\\n      require (\\r\\n        hasRole(msg.sender), \\r\\n        \\\"AdminControl: sender must has minting role\\\"\\r\\n      );\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n      require (\\r\\n        hasRole(msg.sender), \\r\\n        \\\"AdminControl: sender must has minting role\\\"\\r\\n      );\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n      _grantRole(msg.sender);\\r\\n    }\\r\\n\\r\\n    function grantMinterRole (address account) public  onlyOwner {\\r\\n      _grantRole(account);\\r\\n    }\\r\\n\\r\\n    function revokeMinterRole (address account) public  onlyOwner {\\r\\n      _revokeRole(account);\\r\\n    }\\r\\n\\r\\n    function hasRole(address account) public view returns (bool) {\\r\\n      return _controllerRoles.has(account);\\r\\n    }\\r\\n    \\r\\n    function _grantRole (address account) internal {\\r\\n      _controllerRoles.add(account);\\r\\n    }\\r\\n\\r\\n    function _revokeRole (address account) internal {\\r\\n      _controllerRoles.remove(account);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nlibrary StringUtil {\\r\\n\\r\\n    /**\\r\\n     * @dev Return the count of the dot \\\".\\\" in a string\\r\\n    */\\r\\n    function dotCount(string memory s) internal pure returns (uint) {\\r\\n        s; // Don't warn about unused variables\\r\\n        // Starting here means the LSB will be the byte we care about\\r\\n        uint ptr;\\r\\n        uint end;\\r\\n        assembly {\\r\\n            ptr := add(s, 1)\\r\\n            end := add(mload(s), ptr)\\r\\n        }\\r\\n        uint num = 0;\\r\\n        uint len = 0;\\r\\n        for (len; ptr < end; len++) {\\r\\n            uint8 b;\\r\\n            assembly { b := and(mload(ptr), 0xFF) }\\r\\n            if (b == 0x2e) {\\r\\n                num += 1;\\r\\n            }\\r\\n            ptr += 1;\\r\\n        }\\r\\n        return num;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction toLower(string memory str) internal pure returns (string memory) {\\r\\n        bytes memory bStr = bytes(str);\\r\\n        bytes memory bLower = new bytes(bStr.length);\\r\\n        for (uint i = 0; i < bStr.length; i++) {\\r\\n            // Uppercase character...\\r\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\r\\n                // So we add 32 to make it lowercase\\r\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\r\\n            } else {\\r\\n                bLower[i] = bStr[i];\\r\\n            }\\r\\n        }\\r\\n        return string(bLower);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction toHash(string memory _s) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(_s));\\r\\n    }\\r\\n\\r\\n    function isEmpty(string memory _s) internal pure returns (bool) {\\r\\n        return bytes(_s).length == 0;\\r\\n    }\\r\\n\\t\\r\\n\\t function compare(string memory _a, string memory _b) internal pure returns (int) {\\r\\n        bytes memory a = bytes(_a);\\r\\n        bytes memory b = bytes(_b);\\r\\n        uint minLength = a.length;\\r\\n        if (b.length < minLength) minLength = b.length;\\r\\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\\r\\n        for (uint i = 0; i < minLength; i ++)\\r\\n            if (a[i] < b[i])\\r\\n                return -1;\\r\\n            else if (a[i] > b[i])\\r\\n                return 1;\\r\\n        if (a.length < b.length)\\r\\n            return -1;\\r\\n        else if (a.length > b.length)\\r\\n            return 1;\\r\\n        else\\r\\n            return 0;\\r\\n    }\\r\\n    /// @dev Compares two strings and returns true iff they are equal.\\r\\n    function equal(string memory _a, string memory _b) internal pure returns (bool) {\\r\\n        return compare(_a, _b) == 0;\\r\\n    }\\r\\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\\r\\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int)\\r\\n    {\\r\\n    \\tbytes memory h = bytes(_haystack);\\r\\n    \\tbytes memory n = bytes(_needle);\\r\\n    \\tif(h.length < 1 || n.length < 1 || (n.length > h.length)) \\r\\n    \\t\\treturn -1;\\r\\n    \\telse if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \\\"int\\\" type with a max length of (2^128 - 1)\\r\\n    \\t\\treturn -1;\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n    \\telse\\r\\n    \\t{\\r\\n    \\t\\tuint subindex = 0;\\r\\n    \\t\\tfor (uint i = 0; i < h.length; i ++)\\r\\n    \\t\\t{\\r\\n    \\t\\t\\tif (h[i] == n[0]) // found the first char of b\\r\\n    \\t\\t\\t{\\r\\n    \\t\\t\\t\\tsubindex = 1;\\r\\n    \\t\\t\\t\\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\\r\\n    \\t\\t\\t\\t{\\r\\n    \\t\\t\\t\\t\\tsubindex++;\\r\\n    \\t\\t\\t\\t}\\t\\r\\n    \\t\\t\\t\\tif(subindex == n.length)\\r\\n    \\t\\t\\t\\t\\treturn int(i);\\r\\n    \\t\\t\\t}\\r\\n    \\t\\t}\\r\\n    \\t\\treturn -1;\\r\\n    \\t}\\t\\r\\n    }\\r\\n\\t\\r\\n\\t\\r\\n}\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract KeyStorage {\\r\\n    mapping(uint256 => string) private _keys;\\r\\n\\r\\n    function getKey(uint256 keyHash) public view returns (string memory) {\\r\\n        return _keys[keyHash];\\r\\n    }\\r\\n\\r\\n    function getKeys(uint256[] calldata hashes) public view returns (string[] memory values) {\\r\\n        values = new string[](hashes.length);\\r\\n        for (uint256 i = 0; i < hashes.length; i++) {\\r\\n            values[i] = getKey(hashes[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function addKey(string memory key) external {\\r\\n        _addKey(uint256(keccak256(abi.encodePacked(key))), key);\\r\\n    }\\r\\n\\r\\n    function _existsKey(uint256 keyHash) internal view returns (bool) {\\r\\n        return bytes(_keys[keyHash]).length > 0;\\r\\n    }\\r\\n\\r\\n    function _addKey(uint256 keyHash, string memory key) internal {\\r\\n        if (!_existsKey(keyHash)) {\\r\\n            _keys[keyHash] = key;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface IRecordReader {\\r\\n    /**\\r\\n     * @dev Function to get record.\\r\\n     * @param key The key to query the value of.\\r\\n     * @param tokenId The token id to fetch.\\r\\n     * @return The value string.\\r\\n     */\\r\\n    function get(string calldata key, uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Function to get multiple record.\\r\\n     * @param keys The keys to query the value of.\\r\\n     * @param tokenId The token id to fetch.\\r\\n     * @return The values.\\r\\n     */\\r\\n    function getMany(string[] calldata keys, uint256 tokenId) external view returns (string[] memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Function get value by provied key hash.\\r\\n     * @param keyHash The key to query the value of.\\r\\n     * @param tokenId The token id to set.\\r\\n     */\\r\\n    function getByHash(uint256 keyHash, uint256 tokenId) external view returns (string memory key, string memory value);\\r\\n\\r\\n    /**\\r\\n     * @dev Function get values by provied key hashes.\\r\\n     * @param keyHashes The key to query the value of.\\r\\n     * @param tokenId The token id to set.\\r\\n     */\\r\\n    function getManyByHash(uint256[] calldata keyHashes, uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        returns (string[] memory keys, string[] memory values);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\ninterface IRecordStorage is IRecordReader {\\r\\n    event Set(uint256 indexed tokenId, string indexed keyIndex, string indexed valueIndex, string key, string value);\\r\\n\\r\\n    event NewKey(uint256 indexed tokenId, string indexed keyIndex, string key);\\r\\n\\r\\n    event ResetRecords(uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Set record by key\\r\\n     * @param key The key set the value of\\r\\n     * @param value The value to set key to\\r\\n     * @param tokenId ERC-721 token id to set\\r\\n     */\\r\\n    function set(\\r\\n        string calldata key,\\r\\n        string calldata value,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Set records by keys\\r\\n     * @param keys The keys set the values of\\r\\n     * @param values Records values\\r\\n     * @param tokenId ERC-721 token id of the domain\\r\\n     */\\r\\n    function setMany(\\r\\n        string[] memory keys,\\r\\n        string[] memory values,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Set record by key hash\\r\\n     * @param keyHash The key hash set the value of\\r\\n     * @param value The value to set key to\\r\\n     * @param tokenId ERC-721 token id to set\\r\\n     */\\r\\n    function setByHash(\\r\\n        uint256 keyHash,\\r\\n        string calldata value,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Set records by key hashes\\r\\n     * @param keyHashes The key hashes set the values of\\r\\n     * @param values Records values\\r\\n     * @param tokenId ERC-721 token id of the domain\\r\\n     */\\r\\n    function setManyByHash(\\r\\n        uint256[] calldata keyHashes,\\r\\n        string[] calldata values,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Reset all domain records and set new ones\\r\\n     * @param keys New record keys\\r\\n     * @param values New record values\\r\\n     * @param tokenId ERC-721 token id of the domain\\r\\n     */\\r\\n    function reconfigure(\\r\\n        string[] memory keys,\\r\\n        string[] memory values,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Function to reset all existing records on a domain.\\r\\n     * @param tokenId ERC-721 token id to set.\\r\\n     */\\r\\n    function reset(uint256 tokenId) external;\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\nabstract contract RecordStorage is KeyStorage, IRecordStorage {\\r\\n    /// @dev mapping of presetIds to keyIds to values\\r\\n    mapping(uint256 => mapping(uint256 => string)) internal _records;\\r\\n\\r\\n    /// @dev mapping of tokenIds to presetIds\\r\\n    mapping(uint256 => uint256) internal _tokenPresets;\\r\\n\\r\\n    function get(string calldata key, uint256 tokenId) external view override returns (string memory value) {\\r\\n        value = _get(key, tokenId);\\r\\n    }\\r\\n\\r\\n    function getMany(string[] calldata keys, uint256 tokenId) external view override returns (string[] memory values) {\\r\\n        values = new string[](keys.length);\\r\\n        for (uint256 i = 0; i < keys.length; i++) {\\r\\n            values[i] = _get(keys[i], tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getByHash(uint256 keyHash, uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (string memory key, string memory value)\\r\\n    {\\r\\n        (key, value) = _getByHash(keyHash, tokenId);\\r\\n    }\\r\\n\\r\\n    function getManyByHash(uint256[] calldata keyHashes, uint256 tokenId)\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (string[] memory keys, string[] memory values)\\r\\n    {\\r\\n        keys = new string[](keyHashes.length);\\r\\n        values = new string[](keyHashes.length);\\r\\n        for (uint256 i = 0; i < keyHashes.length; i++) {\\r\\n            (keys[i], values[i]) = _getByHash(keyHashes[i], tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _presetOf(uint256 tokenId) internal view virtual returns (uint256) {\\r\\n        return _tokenPresets[tokenId] == 0 ? tokenId : _tokenPresets[tokenId];\\r\\n    }\\r\\n\\r\\n    function _set(\\r\\n        string calldata key,\\r\\n        string calldata value,\\r\\n        uint256 tokenId\\r\\n    ) internal {\\r\\n        uint256 keyHash = uint256(keccak256(abi.encodePacked(key)));\\r\\n        _addKey(keyHash, key);\\r\\n        _set(keyHash, key, value, tokenId);\\r\\n    }\\r\\n\\r\\n    function _setMany(\\r\\n        string[] calldata keys,\\r\\n        string[] calldata values,\\r\\n        uint256 tokenId\\r\\n    ) internal {\\r\\n        for (uint256 i = 0; i < keys.length; i++) {\\r\\n            _set(keys[i], values[i], tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _setByHash(\\r\\n        uint256 keyHash,\\r\\n        string calldata value,\\r\\n        uint256 tokenId\\r\\n    ) internal {\\r\\n        require(_existsKey(keyHash), 'RecordStorage: KEY_NOT_FOUND');\\r\\n        _set(keyHash, getKey(keyHash), value, tokenId);\\r\\n    }\\r\\n\\r\\n    function _setManyByHash(\\r\\n        uint256[] calldata keyHashes,\\r\\n        string[] calldata values,\\r\\n        uint256 tokenId\\r\\n    ) internal {\\r\\n        for (uint256 i = 0; i < keyHashes.length; i++) {\\r\\n            _setByHash(keyHashes[i], values[i], tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _reconfigure(\\r\\n        string[] calldata keys,\\r\\n        string[] calldata values,\\r\\n        uint256 tokenId\\r\\n    ) internal {\\r\\n        _reset(tokenId);\\r\\n        _setMany(keys, values, tokenId);\\r\\n    }\\r\\n\\r\\n    function _reset(uint256 tokenId) internal {\\r\\n        _tokenPresets[tokenId] = uint256(keccak256(abi.encodePacked(_presetOf(tokenId))));\\r\\n        emit ResetRecords(tokenId);\\r\\n    }\\r\\n\\r\\n    function _get(string memory key, uint256 tokenId) private view returns (string memory) {\\r\\n        return _get(uint256(keccak256(abi.encodePacked(key))), tokenId);\\r\\n    }\\r\\n\\r\\n    function _getByHash(uint256 keyHash, uint256 tokenId)\\r\\n        private\\r\\n        view\\r\\n        returns (string memory key, string memory value)\\r\\n    {\\r\\n        key = getKey(keyHash);\\r\\n        value = _get(keyHash, tokenId);\\r\\n    }\\r\\n\\r\\n    function _get(uint256 keyHash, uint256 tokenId) private view returns (string memory) {\\r\\n        return _records[_presetOf(tokenId)][keyHash];\\r\\n    }\\r\\n\\r\\n    function _set(\\r\\n        uint256 keyHash,\\r\\n        string memory key,\\r\\n        string memory value,\\r\\n        uint256 tokenId\\r\\n    ) private {\\r\\n        if (bytes(_records[_presetOf(tokenId)][keyHash]).length == 0) {\\r\\n            emit NewKey(tokenId, key, key);\\r\\n        }\\r\\n\\r\\n        _records[_presetOf(tokenId)][keyHash] = value;\\r\\n        emit Set(tokenId, key, value, key, value);\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract Web3Domains is ERC721, ERC721Enumerable, AdminControl, RecordStorage\\r\\n{\\r\\n\\tusing SafeMath for uint256;\\r\\n\\t \\r\\n\\tusing EnumerableSet for EnumerableSet.UintSet;  \\r\\n\\t\\r\\n\\tevent NewURI(uint256 indexed tokenId, string tokenUri);\\r\\n\\t\\t\\r\\n\\tmapping (uint256 => EnumerableSet.UintSet) private _subTokens;\\r\\n\\r\\n\\tmapping (uint256 => string) public _tokenURIs;\\r\\n\\t\\r\\n\\tmapping(address => uint256) private _tokenReverses;\\r\\n\\r\\n    mapping(uint256 => string) private _tlds;\\r\\n\\r\\n\\tstring private _nftBaseURI = \\\"\\\";\\r\\n\\t\\r\\n\\tbool public _saleIsActive = true;\\r\\n\\r\\n\\tuint256 private _price = 1 ether;\\r\\n\\t\\r\\n\\tuint256 private _3chartimes = 10;\\r\\n\\t\\r\\n\\tuint256 private _4chartimes = 5;\\r\\n\\t\\r\\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId)\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() ERC721(\\\"Web3Domains\\\", \\\"W3D\\\") {\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\t\\r\\n\\t\\r\\n    function isApprovedOrOwner(address account, uint256 tokenId) external view returns(bool)  {\\r\\n        return _isApprovedOrOwner(account, tokenId);\\r\\n    }\\r\\n\\t\\r\\n\\t\\r\\n\\tfunction getOwner(string memory domain) external view returns (address)  {\\r\\n\\t\\tstring memory _domain = StringUtil.toLower(domain);\\r\\n\\t    uint256 tokenId = uint256(keccak256(abi.encodePacked(_domain)));\\r\\n        return ownerOf(tokenId);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction getDomainbyAddress(address account) external view returns (uint256[] memory tokenIds,  string[] memory domains)  {\\r\\n\\t\\tuint256 _balance = balanceOf(account);\\r\\n        require(_balance > 0, \\\"\\\");\\t\\r\\n        uint256[] memory _tokenIds = new uint256[](_balance);\\r\\n        string[] memory _domains = new string[](_balance);\\r\\n        for (uint256 i = 0; i < _balance; i++) {\\r\\n            uint256 tokenId = tokenOfOwnerByIndex(account, i);\\r\\n            string memory domain = _tokenURIs[tokenId];\\r\\n            _tokenIds[i] = tokenId;\\r\\n            _domains[i] = domain;\\r\\n        }\\r\\n        tokenIds = _tokenIds;\\r\\n        domains = _domains;\\r\\n    }\\r\\n\\t\\r\\n\\t\\t\\r\\n\\tfunction exists(uint256 tokenId) external view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n\\tfunction getPrice() public view returns (uint256) {\\r\\n        return _price;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction getPrice3Char() public view returns (uint256) {\\r\\n        return getPrice().mul(_3chartimes);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction getPrice4Char() public view returns (uint256) {\\r\\n        return getPrice().mul(_4chartimes);\\r\\n    }\\r\\n\\t\\r\\n\\r\\n\\tfunction get3charTimes() public view returns (uint256) {\\r\\n        return _3chartimes;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction get4charTimes() public view returns (uint256) {\\r\\n        return _4chartimes;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setTimes(uint256 __3chartime, uint256 __4chartime) public onlyOwner {\\r\\n        _3chartimes = __3chartime;\\r\\n\\t\\t_4chartimes = __4chartime;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setPrice(uint256 price) public onlyOwner {\\r\\n        _price = price;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setTLD(string memory _tld) public onlyOwner {\\r\\n        uint256 tokenId = genTokenId(_tld);\\r\\n\\t\\t_tlds[tokenId] = _tld;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction isTLD(string memory _tld) public view returns (bool) {\\r\\n\\t\\tbool isExist = false;\\r\\n        uint256 tokenId = genTokenId(_tld);\\r\\n\\t\\tif (bytes(_tlds[tokenId]).length != 0){\\r\\n            isExist = true;\\r\\n        }\\r\\n\\t\\treturn isExist;\\r\\n\\t}\\r\\n\\t\\r\\n\\tfunction setSaleState() public onlyOwner {\\r\\n        _saleIsActive = !_saleIsActive;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction _baseURI() internal view override returns (string memory) {\\r\\n        return _nftBaseURI;\\r\\n    }\\r\\n    \\r\\n    function setBaseURI(string memory _uri) external onlyOwner {\\r\\n        _nftBaseURI = _uri;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n\\t\\tstring memory baseURI = _baseURI();\\r\\n        if (bytes(baseURI).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(baseURI, _tokenURI));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(baseURI, tokenId));\\r\\n    }\\r\\n\\t\\r\\n\\t   \\r\\n\\r\\n\\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\t\\r\\n\\r\\n\\tfunction buyDomain(string memory domain, string memory tld) external payable \\r\\n\\t{\\r\\n\\t\\trequire(_saleIsActive, \\\"Sale must be active to buy\\\");\\r\\n\\t\\t\\r\\n\\t\\trequire(bytes(tld).length != 0, \\\"Top level domain must be non-empty\\\");\\r\\n\\t\\t\\r\\n\\t\\trequire(isTLD(tld) == true, \\\"Top level domain not exist\\\");\\r\\n\\t\\t\\r\\n\\t\\tuint256 _length = bytes(domain).length;\\r\\n\\t\\t\\r\\n\\t\\trequire(_length != 0, \\\"Domain must be non-empty\\\");\\t\\r\\n\\t\\t\\r\\n\\t\\trequire(_length >= 3, \\\"Domain requires at least 3 characters\\\");\\t\\r\\n\\t\\t\\r\\n\\t\\trequire(StringUtil.dotCount(domain) == 0, \\\"Domain not support\\\");\\r\\n\\t\\r\\n\\t\\tif (_length == 3)\\r\\n\\t\\t{\\r\\n\\t\\t\\trequire(msg.value >= getPrice().mul(_3chartimes), \\\"Insufficient Token or Token value sent is not correct\\\");\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (_length == 4)\\r\\n\\t\\t{\\r\\n\\t\\t\\trequire(msg.value >= getPrice().mul(_4chartimes), \\\"Insufficient Token or Token value sent is not correct\\\");\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (_length >= 5)\\r\\n\\t\\t{\\r\\n\\t\\t\\trequire(msg.value >= getPrice(), \\\"Insufficient Token or Token value sent is not correct\\\");\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tstring memory _domain = StringUtil.toLower(domain);\\r\\n\\t\\t\\r\\n\\t\\tstring memory _tld = StringUtil.toLower(tld);\\r\\n\\t\\t\\r\\n\\t\\t_domain = string(abi.encodePacked(_domain, \\\".\\\", _tld));\\r\\n\\t\\t\\r\\n\\t\\tuint256 tokenId = genTokenId(_domain);\\r\\n\\t\\t\\r\\n\\t\\trequire (!_exists(tokenId), \\\"Domain already exists\\\");\\r\\n\\t\\t\\r\\n\\t   _safeMint(msg.sender, tokenId);\\r\\n\\t   \\r\\n\\t   _setTokenURI(tokenId, _domain);\\r\\n\\t   \\r\\n\\t   emit NewURI(tokenId, _domain);\\r\\n    }\\r\\n\\r\\n\\tfunction registerDomain(address to, string memory domain, string memory tld) external onlyOwner \\r\\n\\t{\\r\\n\\t\\trequire(to != address(0), \\\"To address is null\\\");\\r\\n\\t\\t\\r\\n\\t\\trequire(bytes(tld).length != 0, \\\"Top level domain must be non-empty\\\");\\r\\n\\t\\t\\r\\n\\t\\trequire(isTLD(tld) == true, \\\"Top level domain not exist\\\");\\r\\n\\t\\t\\r\\n\\t\\trequire(bytes(domain).length != 0, \\\"Domain must be non-empty\\\");\\t\\r\\n\\t\\t\\r\\n\\t\\trequire(bytes(domain).length >= 3, \\\"Domain requires at least 3 characters\\\");\\t\\r\\n\\t\\t\\r\\n\\t\\trequire(StringUtil.dotCount(domain) == 0, \\\"Domain not support\\\");\\r\\n\\r\\n\\t\\tstring memory _domain = StringUtil.toLower(domain);\\r\\n\\r\\n\\t\\tstring memory _tld = StringUtil.toLower(tld);\\r\\n\\t\\t\\r\\n\\t\\t_domain = string(abi.encodePacked(_domain, \\\".\\\", _tld));\\r\\n\\r\\n\\t\\tuint256 tokenId = genTokenId(_domain);\\r\\n\\t\\t\\r\\n\\t\\trequire (!_exists(tokenId), \\\"Domain already exists\\\");\\r\\n\\t\\t\\r\\n       _safeMint(to, tokenId);\\r\\n\\t   \\r\\n\\t   _setTokenURI(tokenId, _domain);\\r\\n\\t   \\r\\n\\t   emit NewURI(tokenId, _domain);\\r\\n    }\\r\\n\\r\\n\\tfunction transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override(IERC721, ERC721)  {\\r\\n\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\t\\t\\r\\n\\t\\t_reset(tokenId);\\r\\n\\t\\t\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override(IERC721, ERC721)  {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override(IERC721, ERC721) {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\t\\t\\r\\n\\t\\t_reset(tokenId);\\r\\n\\t\\t\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\t\\t\\r\\n\\tfunction burn(uint256 tokenId) public virtual {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\r\\n\\t\\t\\r\\n\\t\\tif (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n\\t\\t\\r\\n\\t\\tif (_tokenReverses[_msgSender()] != 0) {\\r\\n            delete _tokenReverses[_msgSender()];\\r\\n        }\\r\\n\\t\\t\\r\\n\\t\\t_reset(tokenId);\\r\\n\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n    function setOwner(address to, uint256 tokenId) external onlyApprovedOrOwner(tokenId) {\\r\\n        _transfer(ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\t\\r\\n\\t/**\\r\\n     * Begin: set and get Reverses\\r\\n     */\\r\\n\\tfunction reverseOf(address account) public view returns (string memory){\\r\\n        uint256 tokenId = _tokenReverses[account];\\r\\n        require(tokenId != 0, 'ReverseResolver: REVERSE_RECORD_IS_EMPTY');\\r\\n        require(_isApprovedOrOwner(account, tokenId), 'ReverseResolver: ACCOUNT_IS_NOT_APPROVED_OR_OWNER');\\r\\n        return _tokenURIs[tokenId];\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setReverse(uint256 tokenId) public {\\r\\n        address _sender = _msgSender();\\r\\n        require(_isApprovedOrOwner(_sender, tokenId), 'ReverseResolver: SENDER_IS_NOT_APPROVED_OR_OWNER');\\r\\n        _tokenReverses[_sender] = tokenId;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setReverse(string memory domain) public {\\r\\n\\t\\tuint256 tokenId = genTokenId(domain);\\r\\n        address _sender = _msgSender();\\r\\n        require(_isApprovedOrOwner(_sender, tokenId), 'ReverseResolver: SENDER_IS_NOT_APPROVED_OR_OWNER');\\r\\n        _tokenReverses[_sender] = tokenId;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction removeReverse() public {\\r\\n        address _sender = _msgSender();\\r\\n        uint256 tokenId = _tokenReverses[_sender];\\r\\n        require(tokenId != 0, 'ReverseResolver: REVERSE_RECORD_IS_EMPTY');\\r\\n        delete _tokenReverses[_sender];\\r\\n    }\\r\\n\\t/**\\r\\n     * End: set and get Reverses\\r\\n     */\\r\\n\\t\\t\\r\\n    function registerSubDomain(address to, uint256 tokenId, string memory sub) external \\r\\n        onlyApprovedOrOwner(tokenId) \\r\\n    {\\r\\n        _safeMintSubDomain(to, tokenId, sub, \\\"\\\");\\r\\n    }\\r\\n\\t\\r\\n    function burnSubDomain(uint256 tokenId, string memory sub) external onlyApprovedOrOwner(tokenId) \\r\\n\\t{\\r\\n        _burnSubDomain(tokenId, sub);\\r\\n    }\\r\\n\\t\\r\\n\\t function _safeMintSubDomain(address to, uint256 tokenId, string memory sub, bytes memory _data) internal {\\r\\n\\t\\trequire(to != address(0));\\r\\n        require (bytes(sub).length != 0);\\r\\n        require (StringUtil.dotCount(sub) == 0);\\r\\n        require (_exists(tokenId));\\r\\n\\t\\t\\r\\n\\t\\tstring memory _sub = StringUtil.toLower(sub);\\r\\n\\t\\t\\r\\n        bytes memory _newUri = abi.encodePacked(_sub, \\\".\\\", _tokenURIs[tokenId]);\\r\\n\\t\\t\\r\\n\\t\\tuint256 _newTokenId = genTokenId(string(_newUri));\\r\\n\\r\\n        uint256 count = StringUtil.dotCount(_tokenURIs[tokenId]);\\r\\n\\t\\t\\r\\n        if (count == 1) \\r\\n\\t\\t{\\r\\n            _subTokens[tokenId].add(_newTokenId);\\r\\n        }\\r\\n\\r\\n        if (bytes(_data).length != 0) {\\r\\n            _safeMint(to, _newTokenId, _data);\\r\\n        } else {\\r\\n            _safeMint(to, _newTokenId);\\r\\n        }\\r\\n        \\r\\n        _setTokenURI(_newTokenId, string(_newUri));\\r\\n\\r\\n        emit NewURI(_newTokenId, string(_newUri));\\r\\n    }\\r\\n\\r\\n    function _burnSubDomain(uint256 tokenId, string memory sub) internal {\\r\\n        string memory _sub = StringUtil.toLower(sub);\\r\\n\\t\\t\\r\\n        bytes memory _newUri = abi.encodePacked(_sub, \\\".\\\", _tokenURIs[tokenId]);\\r\\n\\t\\t\\r\\n\\t\\tuint256 _newTokenId = genTokenId(string(_newUri));\\r\\n        // remove sub tokenIds itself\\r\\n        _subTokens[tokenId].remove(_newTokenId);\\r\\n\\t\\t\\r\\n\\t\\tif (bytes(_tokenURIs[_newTokenId]).length != 0) {\\r\\n            delete _tokenURIs[_newTokenId];\\r\\n        }\\r\\n\\t\\t\\r\\n        super._burn(_newTokenId);\\r\\n    }\\r\\n\\r\\n    function subTokenIdCount(uint256 tokenId) public view returns (uint256) {\\r\\n        require (_exists(tokenId));\\r\\n        return _subTokens[tokenId].length();\\r\\n    }\\r\\n\\t\\r\\n\\tfunction subTokenIdByIndex(uint256 tokenId, uint256 index) public view returns (uint256) {\\r\\n        require (subTokenIdCount(tokenId) > index);\\r\\n        return _subTokens[tokenId].at(index);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction genTokenId(string memory label) public pure returns(uint256)  {\\r\\n        require (bytes(label).length != 0);\\r\\n        return uint256(keccak256(abi.encodePacked(label)));\\r\\n    }\\r\\n\\r\\n    \\r\\n\\tfunction withdraw() external payable onlyOwner {\\r\\n        require(payable(msg.sender).send(address(this).balance));\\r\\n    }\\r\\n\\t\\r\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\\r\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\r\\n\\t\\treturn super.supportsInterface(interfaceId);\\r\\n\\t}\\r\\n\\t\\r\\n\\t/**\\r\\n     * Begin: working with metadata like: avatar, cover, email, phone, address, social ...\\r\\n     */\\r\\n\\tfunction set(\\r\\n        string calldata key,\\r\\n        string calldata value,\\r\\n        uint256 tokenId\\r\\n    ) external onlyApprovedOrOwner(tokenId)  {\\r\\n        _set(key, value, tokenId);\\r\\n    }\\r\\n\\r\\n    function setMany(\\r\\n        string[] calldata keys,\\r\\n        string[] calldata values,\\r\\n        uint256 tokenId\\r\\n    ) external onlyApprovedOrOwner(tokenId)  {\\r\\n        _setMany(keys, values, tokenId);\\r\\n    }\\r\\n\\r\\n    function setByHash(\\r\\n        uint256 keyHash,\\r\\n        string calldata value,\\r\\n        uint256 tokenId\\r\\n    ) external override onlyApprovedOrOwner(tokenId)  {\\r\\n        _setByHash(keyHash, value, tokenId);\\r\\n    }\\r\\n\\r\\n    function setManyByHash(\\r\\n        uint256[] calldata keyHashes,\\r\\n        string[] calldata values,\\r\\n        uint256 tokenId\\r\\n    ) external override onlyApprovedOrOwner(tokenId)  {\\r\\n        _setManyByHash(keyHashes, values, tokenId);\\r\\n    }\\r\\n\\r\\n    function reconfigure(\\r\\n        string[] calldata keys,\\r\\n        string[] calldata values,\\r\\n        uint256 tokenId\\r\\n    ) external override onlyApprovedOrOwner(tokenId) {\\r\\n        _reconfigure(keys, values, tokenId);\\r\\n    }\\r\\n\\r\\n    function reset(uint256 tokenId) external override onlyApprovedOrOwner(tokenId) {\\r\\n        _reset(tokenId);\\r\\n    }\\r\\n\\t/**\\r\\n     * End: metadata\\r\\n     */\\r\\n}\",\"keccak256\":\"0x6a528f24b57c0f9607069fb9a748a59b688c5ab97877f062b8755875bc88163d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040819052600060808190526200001b916013916200025c565b506014805460ff19166001179055670de0b6b3a7640000601555600a60165560056017553480156200004c57600080fd5b50604080518082018252600b81526a57656233446f6d61696e7360a81b60208083019182528351808501909452600384526215ccd160ea1b9084015281519192916200009b916000916200025c565b508051620000b19060019060208401906200025c565b505050620000ce620000c8620000df60201b60201c565b620000e3565b620000d93362000135565b6200033f565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200015081600b6200015360201b620027901790919060201c565b50565b6200015f8282620001d7565b15620001b25760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064015b60405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b0382166200023c5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620001a9565b506001600160a01b03166000908152602091909152604090205460ff1690565b8280546200026a9062000302565b90600052602060002090601f0160209004810192826200028e5760008555620002d9565b82601f10620002a957805160ff1916838001178555620002d9565b82800160010185558215620002d9579182015b82811115620002d9578251825591602001919060010190620002bc565b50620002e7929150620002eb565b5090565b5b80821115620002e75760008155600101620002ec565b600181811c908216806200031757607f821691505b602082108114156200033957634e487b7160e01b600052602260045260246000fd5b50919050565b614d51806200034f6000396000f3fe6080604052600436106103d95760003560e01c806365064370116101fd578063ab3b87fe11610118578063c87b56dd116100ab578063e985e9c51161007a578063e985e9c514610b60578063ec129eea14610ba9578063f25eb5c114610bc9578063f2fde38b14610bde578063f5c1f76e14610bfe57600080fd5b8063c87b56dd14610aeb578063ce92b33e14610b0b578063d231563014610b2b578063e5f9da8814610b4057600080fd5b8063bb5b27e1116100e7578063bb5b27e114610a68578063bc7c8ceb14610a88578063c479a80414610ab6578063c6438cb814610ad657600080fd5b8063ab3b87fe146109da578063ad59e226146109fa578063b85afd2814610a1a578063b88d4fde14610a4857600080fd5b80637ef09bca1161019057806398a602431161015f57806398a602431461096557806398d5fdca146109855780639cbf529d1461099a578063a22cb465146109ba57600080fd5b80637ef09bca146108f25780638da5cb5b1461091257806391b7f5ed1461093057806395d89b411461095057600080fd5b8063715018a6116101cc578063715018a61461087d57806376f909ae1461089257806377e9d00b146108b25780637e37479e146108d257600080fd5b806365064370146107fc578063672b9f811461080f57806369e2f0fb1461083d57806370a082311461085d57600080fd5b8063384e9a55116102f85780634aaf4a121161028b57806350382c1a1161025a57806350382c1a1461076257806350b3a1441461078257806355f804b3146107a25780635d893ba0146107c25780636352211e146107dc57600080fd5b80634aaf4a12146106ed5780634cd637b51461070d5780634f558e79146107225780634f6ccce71461074257600080fd5b806342966c68116102c757806342966c681461066d578063430c20811461068d57806347c81699146106ad5780634a72584d146106cd57600080fd5b8063384e9a55146106055780633ccfd60b146106255780633dd1eb611461062d57806342842e0e1461064d57600080fd5b80631ed40559116103705780632dc50d9a1161033f5780632dc50d9a146105905780632f745c59146105b0578063310bd74b146105d0578063358deb1c146105f057600080fd5b80631ed405591461051b578063224348361461053057806323b872dd1461055057806327f189751461057057600080fd5b80630bb78ec1116103ac5780630bb78ec11461048f57806318160ddd146104af5780631bd8cc1a146104ce5780631be5e7ed146104fb57600080fd5b806301ffc9a7146103de57806306fdde0314610413578063081812fc14610435578063095ea7b31461046d575b600080fd5b3480156103ea57600080fd5b506103fe6103f9366004613fb3565b610c1e565b60405190151581526020015b60405180910390f35b34801561041f57600080fd5b50610428610c2f565b60405161040a9190614028565b34801561044157600080fd5b5061045561045036600461403b565b610cc1565b6040516001600160a01b03909116815260200161040a565b34801561047957600080fd5b5061048d610488366004614070565b610d4e565b005b34801561049b57600080fd5b506104286104aa36600461403b565b610e64565b3480156104bb57600080fd5b506008545b60405190815260200161040a565b3480156104da57600080fd5b506104ee6104e93660046140e5565b610efe565b60405161040a9190614182565b34801561050757600080fd5b506104286105163660046141d6565b610ff4565b34801561052757600080fd5b5061048d61103f565b34801561053c57600080fd5b5061048d61054b36600461420d565b61107d565b34801561055c57600080fd5b5061048d61056b36600461422f565b6110b2565b34801561057c57600080fd5b5061048d61058b36600461426b565b6110ed565b34801561059c57600080fd5b506104c06105ab36600461420d565b611115565b3480156105bc57600080fd5b506104c06105cb366004614070565b61114a565b3480156105dc57600080fd5b5061048d6105eb36600461403b565b6111e0565b3480156105fc57600080fd5b506016546104c0565b34801561061157600080fd5b5061048d61062036600461403b565b611200565b61048d611241565b34801561063957600080fd5b5061048d6106483660046142de565b611291565b34801561065957600080fd5b5061048d61066836600461422f565b6112c7565b34801561067957600080fd5b5061048d61068836600461403b565b6112e2565b34801561069957600080fd5b506103fe6106a8366004614070565b6113bf565b3480156106b957600080fd5b5061048d6106c83660046142f9565b6113cb565b3480156106d957600080fd5b5061048d6106e836600461435a565b6113eb565b3480156106f957600080fd5b50610455610708366004614457565b611411565b34801561071957600080fd5b506104c0611456565b34801561072e57600080fd5b506103fe61073d36600461403b565b611472565b34801561074e57600080fd5b506104c061075d36600461403b565b61147d565b34801561076e57600080fd5b5061048d61077d366004614457565b611510565b34801561078e57600080fd5b506104c061079d366004614457565b611543565b3480156107ae57600080fd5b5061048d6107bd366004614457565b611583565b3480156107ce57600080fd5b506014546103fe9060ff1681565b3480156107e857600080fd5b506104556107f736600461403b565b6115c0565b61048d61080a36600461448b565b611637565b34801561081b57600080fd5b5061082f61082a36600461420d565b61193c565b60405161040a9291906144ee565b34801561084957600080fd5b5061048d6108583660046142de565b611954565b34801561086957600080fd5b506104c06108783660046142de565b611987565b34801561088957600080fd5b5061048d611a0e565b34801561089e57600080fd5b506104c06108ad36600461403b565b611a42565b3480156108be57600080fd5b5061048d6108cd36600461451c565b611a6d565b3480156108de57600080fd5b506104286108ed3660046142de565b611cb3565b3480156108fe57600080fd5b506103fe61090d3660046142de565b611dfb565b34801561091e57600080fd5b50600a546001600160a01b0316610455565b34801561093c57600080fd5b5061048d61094b36600461403b565b611e08565b34801561095c57600080fd5b50610428611e37565b34801561097157600080fd5b5061048d61098036600461458f565b611e46565b34801561099157600080fd5b506015546104c0565b3480156109a657600080fd5b5061048d6109b5366004614457565b611e7a565b3480156109c657600080fd5b5061048d6109d53660046145db565b611ec9565b3480156109e657600080fd5b5061048d6109f5366004614070565b611f8e565b348015610a0657600080fd5b5061048d610a15366004614457565b611fb4565b348015610a2657600080fd5b50610a3a610a353660046140e5565b61200d565b60405161040a929190614617565b348015610a5457600080fd5b5061048d610a6336600461463c565b61212f565b348015610a7457600080fd5b50610428610a8336600461403b565b61216a565b348015610a9457600080fd5b50610aa8610aa33660046142de565b61220c565b60405161040a9291906146b7565b348015610ac257600080fd5b5061048d610ad136600461470e565b6123ef565b348015610ae257600080fd5b506104c061240c565b348015610af757600080fd5b50610428610b0636600461403b565b61241d565b348015610b1757600080fd5b5061048d610b2636600461426b565b612587565b348015610b3757600080fd5b506017546104c0565b348015610b4c57600080fd5b506103fe610b5b366004614457565b6125a7565b348015610b6c57600080fd5b506103fe610b7b36600461474a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610bb557600080fd5b5061048d610bc436600461426b565b6125e4565b348015610bd557600080fd5b5061048d612604565b348015610bea57600080fd5b5061048d610bf93660046142de565b61264c565b348015610c0a57600080fd5b506104ee610c19366004614774565b6126e4565b6000610c298261280c565b92915050565b606060008054610c3e906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6a906147b5565b8015610cb75780601f10610c8c57610100808354040283529160200191610cb7565b820191906000526020600020905b815481529060010190602001808311610c9a57829003601f168201915b5050505050905090565b6000610ccc82612831565b610d325760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610d59826115c0565b9050806001600160a01b0316836001600160a01b03161415610dc75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610d29565b336001600160a01b0382161480610de35750610de38133610b7b565b610e555760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610d29565b610e5f838361284e565b505050565b60106020526000908152604090208054610e7d906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea9906147b5565b8015610ef65780601f10610ecb57610100808354040283529160200191610ef6565b820191906000526020600020905b815481529060010190602001808311610ed957829003601f168201915b505050505081565b6060826001600160401b03811115610f1857610f186143ac565b604051908082528060200260200182016040528015610f4b57816020015b6060815260200190600190039081610f365790505b50905060005b83811015610fec57610fbc858583818110610f6e57610f6e6147f0565b9050602002810190610f809190614806565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792506128bc915050565b828281518110610fce57610fce6147f0565b60200260200101819052508080610fe490614862565b915050610f51565b509392505050565b606061103784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692506128bc915050565b949350505050565b600a546001600160a01b031633146110695760405162461bcd60e51b8152600401610d299061487d565b6014805460ff19811660ff90911615179055565b600a546001600160a01b031633146110a75760405162461bcd60e51b8152600401610d299061487d565b601691909155601755565b6110bd335b826128f1565b6110d95760405162461bcd60e51b8152600401610d29906148b2565b6110e2816129d7565b610e5f838383612a44565b806110f7336110b7565b61110057600080fd5b61110d8686868686612bef565b505050505050565b60008161112184611a42565b1161112b57600080fd5b6000838152600f602052604090206111439083612c52565b9392505050565b600061115583611987565b82106111b75760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610d29565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b806111ea336110b7565b6111f357600080fd5b6111fc826129d7565b5050565b3361120b81836128f1565b6112275760405162461bcd60e51b8152600401610d2990614903565b6001600160a01b0316600090815260116020526040902055565b600a546001600160a01b0316331461126b5760405162461bcd60e51b8152600401610d299061487d565b60405133904780156108fc02916000818181858888f1935050505061128f57600080fd5b565b600a546001600160a01b031633146112bb5760405162461bcd60e51b8152600401610d299061487d565b6112c481612c5e565b50565b610e5f8383836040518060200160405280600081525061212f565b6112eb336110b7565b6113505760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610d29565b60008181526010602052604090208054611369906147b5565b15905061138757600081815260106020526040812061138791613ed2565b33600090815260116020526040902054156113ad57336000908152601160205260408120555b6113b6816129d7565b6112c481612c69565b600061114383836128f1565b806113d5336110b7565b6113de57600080fd5b61110d8686868686612d10565b806113f5336110b7565b6113fe57600080fd5b61140a85858585612def565b5050505050565b60008061141d83612e8f565b90506000816040516020016114329190614953565b6040516020818303038152906040528051906020012060001c9050611037816115c0565b600061146d60175461146760155490565b90612fe9565b905090565b6000610c2982612831565b600061148860085490565b82106114eb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610d29565b600882815481106114fe576114fe6147f0565b90600052602060002001549050919050565b6112c4816040516020016115249190614953565b6040516020818303038152906040528051906020012060001c82612ff5565b600081516000141561155457600080fd5b816040516020016115659190614953565b60408051601f19818403018152919052805160209091012092915050565b600a546001600160a01b031633146115ad5760405162461bcd60e51b8152600401610d299061487d565b80516111fc906013906020840190613f0c565b6000818152600260205260408120546001600160a01b031680610c295760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610d29565b60145460ff166116895760405162461bcd60e51b815260206004820152601a60248201527f53616c65206d7573742062652061637469766520746f206275790000000000006044820152606401610d29565b80516116a75760405162461bcd60e51b8152600401610d299061496f565b6116b0816125a7565b15156001146117015760405162461bcd60e51b815260206004820152601a60248201527f546f70206c6576656c20646f6d61696e206e6f742065786973740000000000006044820152606401610d29565b81518061174b5760405162461bcd60e51b8152602060048201526018602482015277446f6d61696e206d757374206265206e6f6e2d656d70747960401b6044820152606401610d29565b600381101561176c5760405162461bcd60e51b8152600401610d29906149b1565b61177583613021565b156117b75760405162461bcd60e51b8152602060048201526012602482015271111bdb585a5b881b9bdd081cdd5c1c1bdc9d60721b6044820152606401610d29565b80600314156117ee576117cf60165461146760155490565b3410156117ee5760405162461bcd60e51b8152600401610d29906149f6565b80600414156118255761180660175461146760155490565b3410156118255760405162461bcd60e51b8152600401610d29906149f6565b6005811061184f5760155434101561184f5760405162461bcd60e51b8152600401610d29906149f6565b600061185a84612e8f565b9050600061186784612e8f565b9050818160405160200161187c929190614a4b565b6040516020818303038152906040529150600061189883611543565b90506118a381612831565b156118e85760405162461bcd60e51b8152602060048201526015602482015274446f6d61696e20616c72656164792065786973747360581b6044820152606401610d29565b6118f23382613080565b6118fc818461309a565b807fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c39528460405161192c9190614028565b60405180910390a2505050505050565b6060806119498484613123565b909590945092505050565b600a546001600160a01b0316331461197e5760405162461bcd60e51b8152600401610d299061487d565b6112c481613144565b60006001600160a01b0382166119f25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610d29565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314611a385760405162461bcd60e51b8152600401610d299061487d565b61128f600061314f565b6000611a4d82612831565b611a5657600080fd5b6000828152600f60205260409020610c29906131a1565b600a546001600160a01b03163314611a975760405162461bcd60e51b8152600401610d299061487d565b6001600160a01b038316611ae25760405162461bcd60e51b8152602060048201526012602482015271151bc81859191c995cdcc81a5cc81b9d5b1b60721b6044820152606401610d29565b8051611b005760405162461bcd60e51b8152600401610d299061496f565b611b09816125a7565b1515600114611b5a5760405162461bcd60e51b815260206004820152601a60248201527f546f70206c6576656c20646f6d61696e206e6f742065786973740000000000006044820152606401610d29565b8151611ba35760405162461bcd60e51b8152602060048201526018602482015277446f6d61696e206d757374206265206e6f6e2d656d70747960401b6044820152606401610d29565b600382511015611bc55760405162461bcd60e51b8152600401610d29906149b1565b611bce82613021565b15611c105760405162461bcd60e51b8152602060048201526012602482015271111bdb585a5b881b9bdd081cdd5c1c1bdc9d60721b6044820152606401610d29565b6000611c1b83612e8f565b90506000611c2883612e8f565b90508181604051602001611c3d929190614a4b565b60405160208183030381529060405291506000611c5983611543565b9050611c6481612831565b15611ca95760405162461bcd60e51b8152602060048201526015602482015274446f6d61696e20616c72656164792065786973747360581b6044820152606401610d29565b6118f28682613080565b6001600160a01b03811660009081526011602052604090205460609080611cec5760405162461bcd60e51b8152600401610d2990614a87565b611cf683826128f1565b611d5c5760405162461bcd60e51b815260206004820152603160248201527f526576657273655265736f6c7665723a204143434f554e545f49535f4e4f545f60448201527020a8282927ab22a22fa7a92fa7aba722a960791b6064820152608401610d29565b60008181526010602052604090208054611d75906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611da1906147b5565b8015611dee5780601f10611dc357610100808354040283529160200191611dee565b820191906000526020600020905b815481529060010190602001808311611dd157829003601f168201915b5050505050915050919050565b6000610c29600b836131ab565b600a546001600160a01b03163314611e325760405162461bcd60e51b8152600401610d299061487d565b601555565b606060018054610c3e906147b5565b81611e50336110b7565b611e5957600080fd5b611e748484846040518060200160405280600081525061322e565b50505050565b6000611e8582611543565b905033611e9281836128f1565b611eae5760405162461bcd60e51b8152600401610d2990614903565b6001600160a01b031660009081526011602052604090205550565b6001600160a01b038216331415611f225760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610d29565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b80611f98336110b7565b611fa157600080fd5b610e5f611fad836115c0565b8484612a44565b600a546001600160a01b03163314611fde5760405162461bcd60e51b8152600401610d299061487d565b6000611fe982611543565b60008181526012602090815260409091208451929350610e5f929091850190613f0c565b606080836001600160401b03811115612028576120286143ac565b60405190808252806020026020018201604052801561205b57816020015b60608152602001906001900390816120465790505b509150836001600160401b03811115612076576120766143ac565b6040519080825280602002602001820160405280156120a957816020015b60608152602001906001900390816120945790505b50905060005b84811015612126576120d98686838181106120cc576120cc6147f0565b9050602002013585613123565b8483815181106120eb576120eb6147f0565b60200260200101848481518110612104576121046147f0565b602002602001018290528290525050808061211e90614862565b9150506120af565b50935093915050565b61213933836128f1565b6121555760405162461bcd60e51b8152600401610d29906148b2565b61215e826129d7565b611e74848484846133fb565b6000818152600c60205260409020805460609190612187906147b5565b80601f01602080910402602001604051908101604052809291908181526020018280546121b3906147b5565b80156122005780601f106121d557610100808354040283529160200191612200565b820191906000526020600020905b8154815290600101906020018083116121e357829003601f168201915b50505050509050919050565b606080600061221a84611987565b9050600081116122465760405162461bcd60e51b81526020600482015260006024820152604401610d29565b6000816001600160401b03811115612260576122606143ac565b604051908082528060200260200182016040528015612289578160200160208202803683370190505b5090506000826001600160401b038111156122a6576122a66143ac565b6040519080825280602002602001820160405280156122d957816020015b60608152602001906001900390816122c45790505b50905060005b838110156123e35760006122f3888361114a565b600081815260106020526040812080549293509091612311906147b5565b80601f016020809104026020016040519081016040528092919081815260200182805461233d906147b5565b801561238a5780601f1061235f5761010080835404028352916020019161238a565b820191906000526020600020905b81548152906001019060200180831161236d57829003601f168201915b50505050509050818584815181106123a4576123a46147f0565b602002602001018181525050808484815181106123c3576123c36147f0565b6020026020010181905250505080806123db90614862565b9150506122df565b50909590945092505050565b816123f9336110b7565b61240257600080fd5b610e5f838361342e565b600061146d60165461146760155490565b606061242882612831565b61248c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610d29565b600082815260106020526040812080546124a5906147b5565b80601f01602080910402602001604051908101604052809291908181526020018280546124d1906147b5565b801561251e5780601f106124f35761010080835404028352916020019161251e565b820191906000526020600020905b81548152906001019060200180831161250157829003601f168201915b50505050509050600061252f6134da565b9050805160001415612542575092915050565b81511561257457808260405160200161255c929190614acf565b60405160208183030381529060405292505050919050565b808460405160200161255c929190614afe565b80612591336110b7565b61259a57600080fd5b61110d86868686866134e9565b600080806125b484611543565b60008181526012602052604090208054919250906125d1906147b5565b1590506125dd57600191505b5092915050565b806125ee336110b7565b6125f757600080fd5b61110d8686868686613557565b33600081815260116020526040902054806126315760405162461bcd60e51b8152600401610d2990614a87565b506001600160a01b0316600090815260116020526040812055565b600a546001600160a01b031633146126765760405162461bcd60e51b8152600401610d299061487d565b6001600160a01b0381166126db5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d29565b6112c48161314f565b6060816001600160401b038111156126fe576126fe6143ac565b60405190808252806020026020018201604052801561273157816020015b606081526020019060019003908161271c5790505b50905060005b828110156125dd57612760848483818110612754576127546147f0565b9050602002013561216a565b828281518110612772576127726147f0565b6020026020010181905250808061278890614862565b915050612737565b61279a82826131ab565b156127e75760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610d29565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160e01b0319821663780e9d6360e01b1480610c295750610c298261356d565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612883826115c0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6060611143836040516020016128d29190614953565b6040516020818303038152906040528051906020012060001c836135bd565b60006128fc82612831565b61295d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610d29565b6000612968836115c0565b9050806001600160a01b0316846001600160a01b031614806129a35750836001600160a01b031661299884610cc1565b6001600160a01b0316145b8061103757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611037565b6129e08161367c565b6040516020016129f291815260200190565b60408051601f1981840301815282825280516020918201206000858152600e9092529181209190915582917f185c30856dadb58bf097c1f665a52ada7029752dbcad008ea3fefc73bee8c9fe9190a250565b826001600160a01b0316612a57826115c0565b6001600160a01b031614612abf5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610d29565b6001600160a01b038216612b215760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610d29565b612b2c8383836136a8565b612b3760008261284e565b6001600160a01b0383166000908152600360205260408120805460019290612b60908490614b20565b90915550506001600160a01b0382166000908152600360205260408120805460019290612b8e908490614b37565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60005b8481101561110d57612c40868683818110612c0f57612c0f6147f0565b90506020020135858584818110612c2857612c286147f0565b9050602002810190612c3a9190614806565b85612def565b80612c4a81614862565b915050612bf2565b600061114383836136b3565b6112c4600b82612790565b6000612c74826115c0565b9050612c82816000846136a8565b612c8d60008361284e565b6001600160a01b0381166000908152600360205260408120805460019290612cb6908490614b20565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008585604051602001612d25929190614b4f565b60408051601f198184030181528282528051602091820120601f8901829004820284018201909252878352909250612d799183918990899081908401838280828437600092019190915250612ff592505050565b61110d8187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152508892506136dd915050565b612df884613818565b612e445760405162461bcd60e51b815260206004820152601c60248201527f5265636f726453746f726167653a204b45595f4e4f545f464f554e44000000006044820152606401610d29565b611e7484612e518661216a565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792506136dd915050565b60606000829050600081516001600160401b03811115612eb157612eb16143ac565b6040519080825280601f01601f191660200182016040528015612edb576020820181803683370190505b50905060005b8251811015610fec576041838281518110612efe57612efe6147f0565b016020015160f81c10801590612f2e5750605a838281518110612f2357612f236147f0565b016020015160f81c11155b15612f9057828181518110612f4557612f456147f0565b602001015160f81c60f81b60f81c6020612f5f9190614b5f565b60f81b828281518110612f7457612f746147f0565b60200101906001600160f81b031916908160001a905350612fd7565b828181518110612fa257612fa26147f0565b602001015160f81c60f81b828281518110612fbf57612fbf6147f0565b60200101906001600160f81b031916908160001a9053505b80612fe181614862565b915050612ee1565b60006111438284614b84565b612ffe82613818565b6111fc576000828152600c602090815260409091208251610e5f92840190613f0c565b805160009060018381019184010182805b8284101561307757835160ff16602e81141561305657613053600184614b37565b92505b613061600186614b37565b945050808061306f90614862565b915050613032565b50949350505050565b6111fc82826040518060200160405280600081525061383e565b6130a382612831565b6131045760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610d29565b60008281526010602090815260409091208251610e5f92840190613f0c565b60608061312f8461216a565b915061313b84846135bd565b90509250929050565b6112c4600b82613871565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610c29825490565b60006001600160a01b03821661320e5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610d29565b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b03841661324157600080fd5b815161324c57600080fd5b61325582613021565b1561325f57600080fd5b61326883612831565b61327157600080fd5b600061327c83612e8f565b9050600081601060008781526020019081526020016000206040516020016132a5929190614ba3565b604051602081830303815290604052905060006132c182611543565b905060006133696010600089815260200190815260200160002080546132e6906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054613312906147b5565b801561335f5780601f106133345761010080835404028352916020019161335f565b820191906000526020600020905b81548152906001019060200180831161334257829003601f168201915b5050505050613021565b9050806001141561338e576000878152600f6020526040902061338c90836138f3565b505b8451156133a5576133a088838761383e565b6133af565b6133af8883613080565b6133b9828461309a565b817fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c3952846040516133e99190614028565b60405180910390a25050505050505050565b613406848484612a44565b613412848484846138ff565b611e745760405162461bcd60e51b8152600401610d2990614c63565b600061343982612e8f565b905060008160106000868152602001908152602001600020604051602001613462929190614ba3565b6040516020818303038152906040529050600061347e82611543565b6000868152600f6020526040902090915061349990826139fd565b50600081815260106020526040902080546134b3906147b5565b1590506134d15760008181526010602052604081206134d191613ed2565b61140a81612c69565b606060138054610c3e906147b5565b60005b8481101561110d57613545868683818110613509576135096147f0565b905060200281019061351b9190614806565b86868581811061352d5761352d6147f0565b905060200281019061353f9190614806565b86612d10565b8061354f81614862565b9150506134ec565b613560816129d7565b61140a85858585856134e9565b60006001600160e01b031982166380ac58cd60e01b148061359e57506001600160e01b03198216635b5e139f60e01b145b80610c2957506301ffc9a760e01b6001600160e01b0319831614610c29565b6060600d60006135cc8461367c565b8152602001908152602001600020600084815260200190815260200160002080546135f6906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054613622906147b5565b801561366f5780601f106136445761010080835404028352916020019161366f565b820191906000526020600020905b81548152906001019060200180831161365257829003601f168201915b5050505050905092915050565b6000818152600e6020526040812054156136a4576000828152600e6020526040902054610c29565b5090565b610e5f838383613a09565b60008260000182815481106136ca576136ca6147f0565b9060005260206000200154905092915050565b600d60006136ea8361367c565b815260200190815260200160002060008581526020019081526020016000208054613714906147b5565b1515905061376b578260405161372a9190614953565b6040518091039020817f7ae4f661958fbecc2f77be6b0eb280d2a6f604b29e1e7221c82b9da0c4af7f86856040516137629190614028565b60405180910390a35b81600d60006137798461367c565b8152602001908152602001600020600086815260200190815260200160002090805190602001906137ab929190613f0c565b50816040516137ba9190614953565b6040518091039020836040516137d09190614953565b6040518091039020827f851ffe8e74d5015261dba0a1f9e1b0e5d42c5af5d2ad1908fee897c7d80a0d92868660405161380a9291906144ee565b60405180910390a450505050565b6000818152600c602052604081208054829190613834906147b5565b9050119050919050565b6138488383613ac1565b61385560008484846138ff565b610e5f5760405162461bcd60e51b8152600401610d2990614c63565b61387b82826131ab565b6138d15760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401610d29565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b60006111438383613c00565b60006001600160a01b0384163b156139f257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613943903390899088908890600401614cb5565b6020604051808303816000875af192505050801561397e575060408051601f3d908101601f1916820190925261397b91810190614ce8565b60015b6139d8573d8080156139ac576040519150601f19603f3d011682016040523d82523d6000602084013e6139b1565b606091505b5080516139d05760405162461bcd60e51b8152600401610d2990614c63565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611037565b506001949350505050565b60006111438383613c4f565b6001600160a01b038316613a6457613a5f81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613a87565b816001600160a01b0316836001600160a01b031614613a8757613a878382613d42565b6001600160a01b038216613a9e57610e5f81613ddf565b826001600160a01b0316826001600160a01b031614610e5f57610e5f8282613e8e565b6001600160a01b038216613b175760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d29565b613b2081612831565b15613b6d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d29565b613b79600083836136a8565b6001600160a01b0382166000908152600360205260408120805460019290613ba2908490614b37565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600183016020526040812054613c4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c29565b506000610c29565b60008181526001830160205260408120548015613d38576000613c73600183614b20565b8554909150600090613c8790600190614b20565b9050818114613cec576000866000018281548110613ca757613ca76147f0565b9060005260206000200154905080876000018481548110613cca57613cca6147f0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613cfd57613cfd614d05565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c29565b6000915050610c29565b60006001613d4f84611987565b613d599190614b20565b600083815260076020526040902054909150808214613dac576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613df190600190614b20565b60008381526009602052604081205460088054939450909284908110613e1957613e196147f0565b906000526020600020015490508060088381548110613e3a57613e3a6147f0565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613e7257613e72614d05565b6001900381819060005260206000200160009055905550505050565b6000613e9983611987565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b508054613ede906147b5565b6000825580601f10613eee575050565b601f0160209004906000526020600020908101906112c49190613f88565b828054613f18906147b5565b90600052602060002090601f016020900481019282613f3a5760008555613f80565b82601f10613f5357805160ff1916838001178555613f80565b82800160010185558215613f80579182015b82811115613f80578251825591602001919060010190613f65565b506136a49291505b5b808211156136a45760008155600101613f89565b6001600160e01b0319811681146112c457600080fd5b600060208284031215613fc557600080fd5b813561114381613f9d565b60005b83811015613feb578181015183820152602001613fd3565b83811115611e745750506000910152565b60008151808452614014816020860160208601613fd0565b601f01601f19169290920160200192915050565b6020815260006111436020830184613ffc565b60006020828403121561404d57600080fd5b5035919050565b80356001600160a01b038116811461406b57600080fd5b919050565b6000806040838503121561408357600080fd5b61408c83614054565b946020939093013593505050565b60008083601f8401126140ac57600080fd5b5081356001600160401b038111156140c357600080fd5b6020830191508360208260051b85010111156140de57600080fd5b9250929050565b6000806000604084860312156140fa57600080fd5b83356001600160401b0381111561411057600080fd5b61411c8682870161409a565b909790965060209590950135949350505050565b6000815180845260208085019450848260051b860182860160005b85811015614175578383038952614163838351613ffc565b9885019892509084019060010161414b565b5090979650505050505050565b6020815260006111436020830184614130565b60008083601f8401126141a757600080fd5b5081356001600160401b038111156141be57600080fd5b6020830191508360208285010111156140de57600080fd5b6000806000604084860312156141eb57600080fd5b83356001600160401b0381111561420157600080fd5b61411c86828701614195565b6000806040838503121561422057600080fd5b50508035926020909101359150565b60008060006060848603121561424457600080fd5b61424d84614054565b925061425b60208501614054565b9150604084013590509250925092565b60008060008060006060868803121561428357600080fd5b85356001600160401b038082111561429a57600080fd5b6142a689838a0161409a565b909750955060208801359150808211156142bf57600080fd5b506142cc8882890161409a565b96999598509660400135949350505050565b6000602082840312156142f057600080fd5b61114382614054565b60008060008060006060868803121561431157600080fd5b85356001600160401b038082111561432857600080fd5b61433489838a01614195565b9097509550602088013591508082111561434d57600080fd5b506142cc88828901614195565b6000806000806060858703121561437057600080fd5b8435935060208501356001600160401b0381111561438d57600080fd5b61439987828801614195565b9598909750949560400135949350505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b03808411156143dc576143dc6143ac565b604051601f8501601f19908116603f01168101908282118183101715614404576144046143ac565b8160405280935085815286868601111561441d57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261444857600080fd5b611143838335602085016143c2565b60006020828403121561446957600080fd5b81356001600160401b0381111561447f57600080fd5b61103784828501614437565b6000806040838503121561449e57600080fd5b82356001600160401b03808211156144b557600080fd5b6144c186838701614437565b935060208501359150808211156144d757600080fd5b506144e485828601614437565b9150509250929050565b6040815260006145016040830185613ffc565b82810360208401526145138185613ffc565b95945050505050565b60008060006060848603121561453157600080fd5b61453a84614054565b925060208401356001600160401b038082111561455657600080fd5b61456287838801614437565b9350604086013591508082111561457857600080fd5b5061458586828701614437565b9150509250925092565b6000806000606084860312156145a457600080fd5b6145ad84614054565b92506020840135915060408401356001600160401b038111156145cf57600080fd5b61458586828701614437565b600080604083850312156145ee57600080fd5b6145f783614054565b91506020830135801515811461460c57600080fd5b809150509250929050565b60408152600061462a6040830185614130565b82810360208401526145138185614130565b6000806000806080858703121561465257600080fd5b61465b85614054565b935061466960208601614054565b92506040850135915060608501356001600160401b0381111561468b57600080fd5b8501601f8101871361469c57600080fd5b6146ab878235602084016143c2565b91505092959194509250565b604080825283519082018190526000906020906060840190828701845b828110156146f0578151845292840192908401906001016146d4565b505050838103828501526147048186614130565b9695505050505050565b6000806040838503121561472157600080fd5b8235915060208301356001600160401b0381111561473e57600080fd5b6144e485828601614437565b6000806040838503121561475d57600080fd5b61476683614054565b915061313b60208401614054565b6000806020838503121561478757600080fd5b82356001600160401b0381111561479d57600080fd5b6147a98582860161409a565b90969095509350505050565b600181811c908216806147c957607f821691505b602082108114156147ea57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261481d57600080fd5b8301803591506001600160401b0382111561483757600080fd5b6020019150368190038213156140de57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156148765761487661484c565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526030908201527f526576657273655265736f6c7665723a2053454e4445525f49535f4e4f545f4160408201526f28282927ab22a22fa7a92fa7aba722a960811b606082015260800190565b60008251614965818460208701613fd0565b9190910192915050565b60208082526022908201527f546f70206c6576656c20646f6d61696e206d757374206265206e6f6e2d656d70604082015261747960f01b606082015260800190565b60208082526025908201527f446f6d61696e207265717569726573206174206c656173742033206368617261604082015264637465727360d81b606082015260800190565b60208082526035908201527f496e73756666696369656e7420546f6b656e206f7220546f6b656e2076616c7560408201527419481cd95b9d081a5cc81b9bdd0818dbdc9c9958dd605a1b606082015260800190565b60008351614a5d818460208801613fd0565b601760f91b9083019081528351614a7b816001840160208801613fd0565b01600101949350505050565b60208082526028908201527f526576657273655265736f6c7665723a20524556455253455f5245434f52445f60408201526749535f454d50545960c01b606082015260800190565b60008351614ae1818460208801613fd0565b835190830190614af5818360208801613fd0565b01949350505050565b60008351614b10818460208801613fd0565b9190910191825250602001919050565b600082821015614b3257614b3261484c565b500390565b60008219821115614b4a57614b4a61484c565b500190565b8183823760009101908152919050565b600060ff821660ff84168060ff03821115614b7c57614b7c61484c565b019392505050565b6000816000190483118215151615614b9e57614b9e61484c565b500290565b600083516020614bb68285838901613fd0565b601760f91b918401918252845460019060009080831c81841680614bdb57607f821691505b858210811415614bf957634e487b7160e01b84526022600452602484fd5b808015614c0d5760018114614c2257614c53565b60ff1984168887015282880186019450614c53565b60008b81526020902060005b84811015614c495781548a8201890152908701908801614c2e565b5050858389010194505b50929a9950505050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061470490830184613ffc565b600060208284031215614cfa57600080fd5b815161114381613f9d565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206feaa28cf8f296c3d29f36820d6c1dc84f1ffe2d824543e95527abf83180d46964736f6c634300080c0033",
  "deployedBytecode": "0x6080604052600436106103d95760003560e01c806365064370116101fd578063ab3b87fe11610118578063c87b56dd116100ab578063e985e9c51161007a578063e985e9c514610b60578063ec129eea14610ba9578063f25eb5c114610bc9578063f2fde38b14610bde578063f5c1f76e14610bfe57600080fd5b8063c87b56dd14610aeb578063ce92b33e14610b0b578063d231563014610b2b578063e5f9da8814610b4057600080fd5b8063bb5b27e1116100e7578063bb5b27e114610a68578063bc7c8ceb14610a88578063c479a80414610ab6578063c6438cb814610ad657600080fd5b8063ab3b87fe146109da578063ad59e226146109fa578063b85afd2814610a1a578063b88d4fde14610a4857600080fd5b80637ef09bca1161019057806398a602431161015f57806398a602431461096557806398d5fdca146109855780639cbf529d1461099a578063a22cb465146109ba57600080fd5b80637ef09bca146108f25780638da5cb5b1461091257806391b7f5ed1461093057806395d89b411461095057600080fd5b8063715018a6116101cc578063715018a61461087d57806376f909ae1461089257806377e9d00b146108b25780637e37479e146108d257600080fd5b806365064370146107fc578063672b9f811461080f57806369e2f0fb1461083d57806370a082311461085d57600080fd5b8063384e9a55116102f85780634aaf4a121161028b57806350382c1a1161025a57806350382c1a1461076257806350b3a1441461078257806355f804b3146107a25780635d893ba0146107c25780636352211e146107dc57600080fd5b80634aaf4a12146106ed5780634cd637b51461070d5780634f558e79146107225780634f6ccce71461074257600080fd5b806342966c68116102c757806342966c681461066d578063430c20811461068d57806347c81699146106ad5780634a72584d146106cd57600080fd5b8063384e9a55146106055780633ccfd60b146106255780633dd1eb611461062d57806342842e0e1461064d57600080fd5b80631ed40559116103705780632dc50d9a1161033f5780632dc50d9a146105905780632f745c59146105b0578063310bd74b146105d0578063358deb1c146105f057600080fd5b80631ed405591461051b578063224348361461053057806323b872dd1461055057806327f189751461057057600080fd5b80630bb78ec1116103ac5780630bb78ec11461048f57806318160ddd146104af5780631bd8cc1a146104ce5780631be5e7ed146104fb57600080fd5b806301ffc9a7146103de57806306fdde0314610413578063081812fc14610435578063095ea7b31461046d575b600080fd5b3480156103ea57600080fd5b506103fe6103f9366004613fb3565b610c1e565b60405190151581526020015b60405180910390f35b34801561041f57600080fd5b50610428610c2f565b60405161040a9190614028565b34801561044157600080fd5b5061045561045036600461403b565b610cc1565b6040516001600160a01b03909116815260200161040a565b34801561047957600080fd5b5061048d610488366004614070565b610d4e565b005b34801561049b57600080fd5b506104286104aa36600461403b565b610e64565b3480156104bb57600080fd5b506008545b60405190815260200161040a565b3480156104da57600080fd5b506104ee6104e93660046140e5565b610efe565b60405161040a9190614182565b34801561050757600080fd5b506104286105163660046141d6565b610ff4565b34801561052757600080fd5b5061048d61103f565b34801561053c57600080fd5b5061048d61054b36600461420d565b61107d565b34801561055c57600080fd5b5061048d61056b36600461422f565b6110b2565b34801561057c57600080fd5b5061048d61058b36600461426b565b6110ed565b34801561059c57600080fd5b506104c06105ab36600461420d565b611115565b3480156105bc57600080fd5b506104c06105cb366004614070565b61114a565b3480156105dc57600080fd5b5061048d6105eb36600461403b565b6111e0565b3480156105fc57600080fd5b506016546104c0565b34801561061157600080fd5b5061048d61062036600461403b565b611200565b61048d611241565b34801561063957600080fd5b5061048d6106483660046142de565b611291565b34801561065957600080fd5b5061048d61066836600461422f565b6112c7565b34801561067957600080fd5b5061048d61068836600461403b565b6112e2565b34801561069957600080fd5b506103fe6106a8366004614070565b6113bf565b3480156106b957600080fd5b5061048d6106c83660046142f9565b6113cb565b3480156106d957600080fd5b5061048d6106e836600461435a565b6113eb565b3480156106f957600080fd5b50610455610708366004614457565b611411565b34801561071957600080fd5b506104c0611456565b34801561072e57600080fd5b506103fe61073d36600461403b565b611472565b34801561074e57600080fd5b506104c061075d36600461403b565b61147d565b34801561076e57600080fd5b5061048d61077d366004614457565b611510565b34801561078e57600080fd5b506104c061079d366004614457565b611543565b3480156107ae57600080fd5b5061048d6107bd366004614457565b611583565b3480156107ce57600080fd5b506014546103fe9060ff1681565b3480156107e857600080fd5b506104556107f736600461403b565b6115c0565b61048d61080a36600461448b565b611637565b34801561081b57600080fd5b5061082f61082a36600461420d565b61193c565b60405161040a9291906144ee565b34801561084957600080fd5b5061048d6108583660046142de565b611954565b34801561086957600080fd5b506104c06108783660046142de565b611987565b34801561088957600080fd5b5061048d611a0e565b34801561089e57600080fd5b506104c06108ad36600461403b565b611a42565b3480156108be57600080fd5b5061048d6108cd36600461451c565b611a6d565b3480156108de57600080fd5b506104286108ed3660046142de565b611cb3565b3480156108fe57600080fd5b506103fe61090d3660046142de565b611dfb565b34801561091e57600080fd5b50600a546001600160a01b0316610455565b34801561093c57600080fd5b5061048d61094b36600461403b565b611e08565b34801561095c57600080fd5b50610428611e37565b34801561097157600080fd5b5061048d61098036600461458f565b611e46565b34801561099157600080fd5b506015546104c0565b3480156109a657600080fd5b5061048d6109b5366004614457565b611e7a565b3480156109c657600080fd5b5061048d6109d53660046145db565b611ec9565b3480156109e657600080fd5b5061048d6109f5366004614070565b611f8e565b348015610a0657600080fd5b5061048d610a15366004614457565b611fb4565b348015610a2657600080fd5b50610a3a610a353660046140e5565b61200d565b60405161040a929190614617565b348015610a5457600080fd5b5061048d610a6336600461463c565b61212f565b348015610a7457600080fd5b50610428610a8336600461403b565b61216a565b348015610a9457600080fd5b50610aa8610aa33660046142de565b61220c565b60405161040a9291906146b7565b348015610ac257600080fd5b5061048d610ad136600461470e565b6123ef565b348015610ae257600080fd5b506104c061240c565b348015610af757600080fd5b50610428610b0636600461403b565b61241d565b348015610b1757600080fd5b5061048d610b2636600461426b565b612587565b348015610b3757600080fd5b506017546104c0565b348015610b4c57600080fd5b506103fe610b5b366004614457565b6125a7565b348015610b6c57600080fd5b506103fe610b7b36600461474a565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610bb557600080fd5b5061048d610bc436600461426b565b6125e4565b348015610bd557600080fd5b5061048d612604565b348015610bea57600080fd5b5061048d610bf93660046142de565b61264c565b348015610c0a57600080fd5b506104ee610c19366004614774565b6126e4565b6000610c298261280c565b92915050565b606060008054610c3e906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610c6a906147b5565b8015610cb75780601f10610c8c57610100808354040283529160200191610cb7565b820191906000526020600020905b815481529060010190602001808311610c9a57829003601f168201915b5050505050905090565b6000610ccc82612831565b610d325760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610d59826115c0565b9050806001600160a01b0316836001600160a01b03161415610dc75760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610d29565b336001600160a01b0382161480610de35750610de38133610b7b565b610e555760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610d29565b610e5f838361284e565b505050565b60106020526000908152604090208054610e7d906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054610ea9906147b5565b8015610ef65780601f10610ecb57610100808354040283529160200191610ef6565b820191906000526020600020905b815481529060010190602001808311610ed957829003601f168201915b505050505081565b6060826001600160401b03811115610f1857610f186143ac565b604051908082528060200260200182016040528015610f4b57816020015b6060815260200190600190039081610f365790505b50905060005b83811015610fec57610fbc858583818110610f6e57610f6e6147f0565b9050602002810190610f809190614806565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792506128bc915050565b828281518110610fce57610fce6147f0565b60200260200101819052508080610fe490614862565b915050610f51565b509392505050565b606061103784848080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508692506128bc915050565b949350505050565b600a546001600160a01b031633146110695760405162461bcd60e51b8152600401610d299061487d565b6014805460ff19811660ff90911615179055565b600a546001600160a01b031633146110a75760405162461bcd60e51b8152600401610d299061487d565b601691909155601755565b6110bd335b826128f1565b6110d95760405162461bcd60e51b8152600401610d29906148b2565b6110e2816129d7565b610e5f838383612a44565b806110f7336110b7565b61110057600080fd5b61110d8686868686612bef565b505050505050565b60008161112184611a42565b1161112b57600080fd5b6000838152600f602052604090206111439083612c52565b9392505050565b600061115583611987565b82106111b75760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610d29565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b806111ea336110b7565b6111f357600080fd5b6111fc826129d7565b5050565b3361120b81836128f1565b6112275760405162461bcd60e51b8152600401610d2990614903565b6001600160a01b0316600090815260116020526040902055565b600a546001600160a01b0316331461126b5760405162461bcd60e51b8152600401610d299061487d565b60405133904780156108fc02916000818181858888f1935050505061128f57600080fd5b565b600a546001600160a01b031633146112bb5760405162461bcd60e51b8152600401610d299061487d565b6112c481612c5e565b50565b610e5f8383836040518060200160405280600081525061212f565b6112eb336110b7565b6113505760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610d29565b60008181526010602052604090208054611369906147b5565b15905061138757600081815260106020526040812061138791613ed2565b33600090815260116020526040902054156113ad57336000908152601160205260408120555b6113b6816129d7565b6112c481612c69565b600061114383836128f1565b806113d5336110b7565b6113de57600080fd5b61110d8686868686612d10565b806113f5336110b7565b6113fe57600080fd5b61140a85858585612def565b5050505050565b60008061141d83612e8f565b90506000816040516020016114329190614953565b6040516020818303038152906040528051906020012060001c9050611037816115c0565b600061146d60175461146760155490565b90612fe9565b905090565b6000610c2982612831565b600061148860085490565b82106114eb5760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610d29565b600882815481106114fe576114fe6147f0565b90600052602060002001549050919050565b6112c4816040516020016115249190614953565b6040516020818303038152906040528051906020012060001c82612ff5565b600081516000141561155457600080fd5b816040516020016115659190614953565b60408051601f19818403018152919052805160209091012092915050565b600a546001600160a01b031633146115ad5760405162461bcd60e51b8152600401610d299061487d565b80516111fc906013906020840190613f0c565b6000818152600260205260408120546001600160a01b031680610c295760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610d29565b60145460ff166116895760405162461bcd60e51b815260206004820152601a60248201527f53616c65206d7573742062652061637469766520746f206275790000000000006044820152606401610d29565b80516116a75760405162461bcd60e51b8152600401610d299061496f565b6116b0816125a7565b15156001146117015760405162461bcd60e51b815260206004820152601a60248201527f546f70206c6576656c20646f6d61696e206e6f742065786973740000000000006044820152606401610d29565b81518061174b5760405162461bcd60e51b8152602060048201526018602482015277446f6d61696e206d757374206265206e6f6e2d656d70747960401b6044820152606401610d29565b600381101561176c5760405162461bcd60e51b8152600401610d29906149b1565b61177583613021565b156117b75760405162461bcd60e51b8152602060048201526012602482015271111bdb585a5b881b9bdd081cdd5c1c1bdc9d60721b6044820152606401610d29565b80600314156117ee576117cf60165461146760155490565b3410156117ee5760405162461bcd60e51b8152600401610d29906149f6565b80600414156118255761180660175461146760155490565b3410156118255760405162461bcd60e51b8152600401610d29906149f6565b6005811061184f5760155434101561184f5760405162461bcd60e51b8152600401610d29906149f6565b600061185a84612e8f565b9050600061186784612e8f565b9050818160405160200161187c929190614a4b565b6040516020818303038152906040529150600061189883611543565b90506118a381612831565b156118e85760405162461bcd60e51b8152602060048201526015602482015274446f6d61696e20616c72656164792065786973747360581b6044820152606401610d29565b6118f23382613080565b6118fc818461309a565b807fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c39528460405161192c9190614028565b60405180910390a2505050505050565b6060806119498484613123565b909590945092505050565b600a546001600160a01b0316331461197e5760405162461bcd60e51b8152600401610d299061487d565b6112c481613144565b60006001600160a01b0382166119f25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610d29565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b03163314611a385760405162461bcd60e51b8152600401610d299061487d565b61128f600061314f565b6000611a4d82612831565b611a5657600080fd5b6000828152600f60205260409020610c29906131a1565b600a546001600160a01b03163314611a975760405162461bcd60e51b8152600401610d299061487d565b6001600160a01b038316611ae25760405162461bcd60e51b8152602060048201526012602482015271151bc81859191c995cdcc81a5cc81b9d5b1b60721b6044820152606401610d29565b8051611b005760405162461bcd60e51b8152600401610d299061496f565b611b09816125a7565b1515600114611b5a5760405162461bcd60e51b815260206004820152601a60248201527f546f70206c6576656c20646f6d61696e206e6f742065786973740000000000006044820152606401610d29565b8151611ba35760405162461bcd60e51b8152602060048201526018602482015277446f6d61696e206d757374206265206e6f6e2d656d70747960401b6044820152606401610d29565b600382511015611bc55760405162461bcd60e51b8152600401610d29906149b1565b611bce82613021565b15611c105760405162461bcd60e51b8152602060048201526012602482015271111bdb585a5b881b9bdd081cdd5c1c1bdc9d60721b6044820152606401610d29565b6000611c1b83612e8f565b90506000611c2883612e8f565b90508181604051602001611c3d929190614a4b565b60405160208183030381529060405291506000611c5983611543565b9050611c6481612831565b15611ca95760405162461bcd60e51b8152602060048201526015602482015274446f6d61696e20616c72656164792065786973747360581b6044820152606401610d29565b6118f28682613080565b6001600160a01b03811660009081526011602052604090205460609080611cec5760405162461bcd60e51b8152600401610d2990614a87565b611cf683826128f1565b611d5c5760405162461bcd60e51b815260206004820152603160248201527f526576657273655265736f6c7665723a204143434f554e545f49535f4e4f545f60448201527020a8282927ab22a22fa7a92fa7aba722a960791b6064820152608401610d29565b60008181526010602052604090208054611d75906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054611da1906147b5565b8015611dee5780601f10611dc357610100808354040283529160200191611dee565b820191906000526020600020905b815481529060010190602001808311611dd157829003601f168201915b5050505050915050919050565b6000610c29600b836131ab565b600a546001600160a01b03163314611e325760405162461bcd60e51b8152600401610d299061487d565b601555565b606060018054610c3e906147b5565b81611e50336110b7565b611e5957600080fd5b611e748484846040518060200160405280600081525061322e565b50505050565b6000611e8582611543565b905033611e9281836128f1565b611eae5760405162461bcd60e51b8152600401610d2990614903565b6001600160a01b031660009081526011602052604090205550565b6001600160a01b038216331415611f225760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610d29565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b80611f98336110b7565b611fa157600080fd5b610e5f611fad836115c0565b8484612a44565b600a546001600160a01b03163314611fde5760405162461bcd60e51b8152600401610d299061487d565b6000611fe982611543565b60008181526012602090815260409091208451929350610e5f929091850190613f0c565b606080836001600160401b03811115612028576120286143ac565b60405190808252806020026020018201604052801561205b57816020015b60608152602001906001900390816120465790505b509150836001600160401b03811115612076576120766143ac565b6040519080825280602002602001820160405280156120a957816020015b60608152602001906001900390816120945790505b50905060005b84811015612126576120d98686838181106120cc576120cc6147f0565b9050602002013585613123565b8483815181106120eb576120eb6147f0565b60200260200101848481518110612104576121046147f0565b602002602001018290528290525050808061211e90614862565b9150506120af565b50935093915050565b61213933836128f1565b6121555760405162461bcd60e51b8152600401610d29906148b2565b61215e826129d7565b611e74848484846133fb565b6000818152600c60205260409020805460609190612187906147b5565b80601f01602080910402602001604051908101604052809291908181526020018280546121b3906147b5565b80156122005780601f106121d557610100808354040283529160200191612200565b820191906000526020600020905b8154815290600101906020018083116121e357829003601f168201915b50505050509050919050565b606080600061221a84611987565b9050600081116122465760405162461bcd60e51b81526020600482015260006024820152604401610d29565b6000816001600160401b03811115612260576122606143ac565b604051908082528060200260200182016040528015612289578160200160208202803683370190505b5090506000826001600160401b038111156122a6576122a66143ac565b6040519080825280602002602001820160405280156122d957816020015b60608152602001906001900390816122c45790505b50905060005b838110156123e35760006122f3888361114a565b600081815260106020526040812080549293509091612311906147b5565b80601f016020809104026020016040519081016040528092919081815260200182805461233d906147b5565b801561238a5780601f1061235f5761010080835404028352916020019161238a565b820191906000526020600020905b81548152906001019060200180831161236d57829003601f168201915b50505050509050818584815181106123a4576123a46147f0565b602002602001018181525050808484815181106123c3576123c36147f0565b6020026020010181905250505080806123db90614862565b9150506122df565b50909590945092505050565b816123f9336110b7565b61240257600080fd5b610e5f838361342e565b600061146d60165461146760155490565b606061242882612831565b61248c5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610d29565b600082815260106020526040812080546124a5906147b5565b80601f01602080910402602001604051908101604052809291908181526020018280546124d1906147b5565b801561251e5780601f106124f35761010080835404028352916020019161251e565b820191906000526020600020905b81548152906001019060200180831161250157829003601f168201915b50505050509050600061252f6134da565b9050805160001415612542575092915050565b81511561257457808260405160200161255c929190614acf565b60405160208183030381529060405292505050919050565b808460405160200161255c929190614afe565b80612591336110b7565b61259a57600080fd5b61110d86868686866134e9565b600080806125b484611543565b60008181526012602052604090208054919250906125d1906147b5565b1590506125dd57600191505b5092915050565b806125ee336110b7565b6125f757600080fd5b61110d8686868686613557565b33600081815260116020526040902054806126315760405162461bcd60e51b8152600401610d2990614a87565b506001600160a01b0316600090815260116020526040812055565b600a546001600160a01b031633146126765760405162461bcd60e51b8152600401610d299061487d565b6001600160a01b0381166126db5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610d29565b6112c48161314f565b6060816001600160401b038111156126fe576126fe6143ac565b60405190808252806020026020018201604052801561273157816020015b606081526020019060019003908161271c5790505b50905060005b828110156125dd57612760848483818110612754576127546147f0565b9050602002013561216a565b828281518110612772576127726147f0565b6020026020010181905250808061278890614862565b915050612737565b61279a82826131ab565b156127e75760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610d29565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160e01b0319821663780e9d6360e01b1480610c295750610c298261356d565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612883826115c0565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6060611143836040516020016128d29190614953565b6040516020818303038152906040528051906020012060001c836135bd565b60006128fc82612831565b61295d5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610d29565b6000612968836115c0565b9050806001600160a01b0316846001600160a01b031614806129a35750836001600160a01b031661299884610cc1565b6001600160a01b0316145b8061103757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16611037565b6129e08161367c565b6040516020016129f291815260200190565b60408051601f1981840301815282825280516020918201206000858152600e9092529181209190915582917f185c30856dadb58bf097c1f665a52ada7029752dbcad008ea3fefc73bee8c9fe9190a250565b826001600160a01b0316612a57826115c0565b6001600160a01b031614612abf5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610d29565b6001600160a01b038216612b215760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610d29565b612b2c8383836136a8565b612b3760008261284e565b6001600160a01b0383166000908152600360205260408120805460019290612b60908490614b20565b90915550506001600160a01b0382166000908152600360205260408120805460019290612b8e908490614b37565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60005b8481101561110d57612c40868683818110612c0f57612c0f6147f0565b90506020020135858584818110612c2857612c286147f0565b9050602002810190612c3a9190614806565b85612def565b80612c4a81614862565b915050612bf2565b600061114383836136b3565b6112c4600b82612790565b6000612c74826115c0565b9050612c82816000846136a8565b612c8d60008361284e565b6001600160a01b0381166000908152600360205260408120805460019290612cb6908490614b20565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60008585604051602001612d25929190614b4f565b60408051601f198184030181528282528051602091820120601f8901829004820284018201909252878352909250612d799183918990899081908401838280828437600092019190915250612ff592505050565b61110d8187878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516020601f8b0181900481028201810190925289815292508991508890819084018382808284376000920191909152508892506136dd915050565b612df884613818565b612e445760405162461bcd60e51b815260206004820152601c60248201527f5265636f726453746f726167653a204b45595f4e4f545f464f554e44000000006044820152606401610d29565b611e7484612e518661216a565b85858080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508792506136dd915050565b60606000829050600081516001600160401b03811115612eb157612eb16143ac565b6040519080825280601f01601f191660200182016040528015612edb576020820181803683370190505b50905060005b8251811015610fec576041838281518110612efe57612efe6147f0565b016020015160f81c10801590612f2e5750605a838281518110612f2357612f236147f0565b016020015160f81c11155b15612f9057828181518110612f4557612f456147f0565b602001015160f81c60f81b60f81c6020612f5f9190614b5f565b60f81b828281518110612f7457612f746147f0565b60200101906001600160f81b031916908160001a905350612fd7565b828181518110612fa257612fa26147f0565b602001015160f81c60f81b828281518110612fbf57612fbf6147f0565b60200101906001600160f81b031916908160001a9053505b80612fe181614862565b915050612ee1565b60006111438284614b84565b612ffe82613818565b6111fc576000828152600c602090815260409091208251610e5f92840190613f0c565b805160009060018381019184010182805b8284101561307757835160ff16602e81141561305657613053600184614b37565b92505b613061600186614b37565b945050808061306f90614862565b915050613032565b50949350505050565b6111fc82826040518060200160405280600081525061383e565b6130a382612831565b6131045760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610d29565b60008281526010602090815260409091208251610e5f92840190613f0c565b60608061312f8461216a565b915061313b84846135bd565b90509250929050565b6112c4600b82613871565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610c29825490565b60006001600160a01b03821661320e5760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610d29565b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b03841661324157600080fd5b815161324c57600080fd5b61325582613021565b1561325f57600080fd5b61326883612831565b61327157600080fd5b600061327c83612e8f565b9050600081601060008781526020019081526020016000206040516020016132a5929190614ba3565b604051602081830303815290604052905060006132c182611543565b905060006133696010600089815260200190815260200160002080546132e6906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054613312906147b5565b801561335f5780601f106133345761010080835404028352916020019161335f565b820191906000526020600020905b81548152906001019060200180831161334257829003601f168201915b5050505050613021565b9050806001141561338e576000878152600f6020526040902061338c90836138f3565b505b8451156133a5576133a088838761383e565b6133af565b6133af8883613080565b6133b9828461309a565b817fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c3952846040516133e99190614028565b60405180910390a25050505050505050565b613406848484612a44565b613412848484846138ff565b611e745760405162461bcd60e51b8152600401610d2990614c63565b600061343982612e8f565b905060008160106000868152602001908152602001600020604051602001613462929190614ba3565b6040516020818303038152906040529050600061347e82611543565b6000868152600f6020526040902090915061349990826139fd565b50600081815260106020526040902080546134b3906147b5565b1590506134d15760008181526010602052604081206134d191613ed2565b61140a81612c69565b606060138054610c3e906147b5565b60005b8481101561110d57613545868683818110613509576135096147f0565b905060200281019061351b9190614806565b86868581811061352d5761352d6147f0565b905060200281019061353f9190614806565b86612d10565b8061354f81614862565b9150506134ec565b613560816129d7565b61140a85858585856134e9565b60006001600160e01b031982166380ac58cd60e01b148061359e57506001600160e01b03198216635b5e139f60e01b145b80610c2957506301ffc9a760e01b6001600160e01b0319831614610c29565b6060600d60006135cc8461367c565b8152602001908152602001600020600084815260200190815260200160002080546135f6906147b5565b80601f0160208091040260200160405190810160405280929190818152602001828054613622906147b5565b801561366f5780601f106136445761010080835404028352916020019161366f565b820191906000526020600020905b81548152906001019060200180831161365257829003601f168201915b5050505050905092915050565b6000818152600e6020526040812054156136a4576000828152600e6020526040902054610c29565b5090565b610e5f838383613a09565b60008260000182815481106136ca576136ca6147f0565b9060005260206000200154905092915050565b600d60006136ea8361367c565b815260200190815260200160002060008581526020019081526020016000208054613714906147b5565b1515905061376b578260405161372a9190614953565b6040518091039020817f7ae4f661958fbecc2f77be6b0eb280d2a6f604b29e1e7221c82b9da0c4af7f86856040516137629190614028565b60405180910390a35b81600d60006137798461367c565b8152602001908152602001600020600086815260200190815260200160002090805190602001906137ab929190613f0c565b50816040516137ba9190614953565b6040518091039020836040516137d09190614953565b6040518091039020827f851ffe8e74d5015261dba0a1f9e1b0e5d42c5af5d2ad1908fee897c7d80a0d92868660405161380a9291906144ee565b60405180910390a450505050565b6000818152600c602052604081208054829190613834906147b5565b9050119050919050565b6138488383613ac1565b61385560008484846138ff565b610e5f5760405162461bcd60e51b8152600401610d2990614c63565b61387b82826131ab565b6138d15760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401610d29565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b60006111438383613c00565b60006001600160a01b0384163b156139f257604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613943903390899088908890600401614cb5565b6020604051808303816000875af192505050801561397e575060408051601f3d908101601f1916820190925261397b91810190614ce8565b60015b6139d8573d8080156139ac576040519150601f19603f3d011682016040523d82523d6000602084013e6139b1565b606091505b5080516139d05760405162461bcd60e51b8152600401610d2990614c63565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611037565b506001949350505050565b60006111438383613c4f565b6001600160a01b038316613a6457613a5f81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613a87565b816001600160a01b0316836001600160a01b031614613a8757613a878382613d42565b6001600160a01b038216613a9e57610e5f81613ddf565b826001600160a01b0316826001600160a01b031614610e5f57610e5f8282613e8e565b6001600160a01b038216613b175760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610d29565b613b2081612831565b15613b6d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610d29565b613b79600083836136a8565b6001600160a01b0382166000908152600360205260408120805460019290613ba2908490614b37565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000818152600183016020526040812054613c4757508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610c29565b506000610c29565b60008181526001830160205260408120548015613d38576000613c73600183614b20565b8554909150600090613c8790600190614b20565b9050818114613cec576000866000018281548110613ca757613ca76147f0565b9060005260206000200154905080876000018481548110613cca57613cca6147f0565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080613cfd57613cfd614d05565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610c29565b6000915050610c29565b60006001613d4f84611987565b613d599190614b20565b600083815260076020526040902054909150808214613dac576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613df190600190614b20565b60008381526009602052604081205460088054939450909284908110613e1957613e196147f0565b906000526020600020015490508060088381548110613e3a57613e3a6147f0565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613e7257613e72614d05565b6001900381819060005260206000200160009055905550505050565b6000613e9983611987565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b508054613ede906147b5565b6000825580601f10613eee575050565b601f0160209004906000526020600020908101906112c49190613f88565b828054613f18906147b5565b90600052602060002090601f016020900481019282613f3a5760008555613f80565b82601f10613f5357805160ff1916838001178555613f80565b82800160010185558215613f80579182015b82811115613f80578251825591602001919060010190613f65565b506136a49291505b5b808211156136a45760008155600101613f89565b6001600160e01b0319811681146112c457600080fd5b600060208284031215613fc557600080fd5b813561114381613f9d565b60005b83811015613feb578181015183820152602001613fd3565b83811115611e745750506000910152565b60008151808452614014816020860160208601613fd0565b601f01601f19169290920160200192915050565b6020815260006111436020830184613ffc565b60006020828403121561404d57600080fd5b5035919050565b80356001600160a01b038116811461406b57600080fd5b919050565b6000806040838503121561408357600080fd5b61408c83614054565b946020939093013593505050565b60008083601f8401126140ac57600080fd5b5081356001600160401b038111156140c357600080fd5b6020830191508360208260051b85010111156140de57600080fd5b9250929050565b6000806000604084860312156140fa57600080fd5b83356001600160401b0381111561411057600080fd5b61411c8682870161409a565b909790965060209590950135949350505050565b6000815180845260208085019450848260051b860182860160005b85811015614175578383038952614163838351613ffc565b9885019892509084019060010161414b565b5090979650505050505050565b6020815260006111436020830184614130565b60008083601f8401126141a757600080fd5b5081356001600160401b038111156141be57600080fd5b6020830191508360208285010111156140de57600080fd5b6000806000604084860312156141eb57600080fd5b83356001600160401b0381111561420157600080fd5b61411c86828701614195565b6000806040838503121561422057600080fd5b50508035926020909101359150565b60008060006060848603121561424457600080fd5b61424d84614054565b925061425b60208501614054565b9150604084013590509250925092565b60008060008060006060868803121561428357600080fd5b85356001600160401b038082111561429a57600080fd5b6142a689838a0161409a565b909750955060208801359150808211156142bf57600080fd5b506142cc8882890161409a565b96999598509660400135949350505050565b6000602082840312156142f057600080fd5b61114382614054565b60008060008060006060868803121561431157600080fd5b85356001600160401b038082111561432857600080fd5b61433489838a01614195565b9097509550602088013591508082111561434d57600080fd5b506142cc88828901614195565b6000806000806060858703121561437057600080fd5b8435935060208501356001600160401b0381111561438d57600080fd5b61439987828801614195565b9598909750949560400135949350505050565b634e487b7160e01b600052604160045260246000fd5b60006001600160401b03808411156143dc576143dc6143ac565b604051601f8501601f19908116603f01168101908282118183101715614404576144046143ac565b8160405280935085815286868601111561441d57600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261444857600080fd5b611143838335602085016143c2565b60006020828403121561446957600080fd5b81356001600160401b0381111561447f57600080fd5b61103784828501614437565b6000806040838503121561449e57600080fd5b82356001600160401b03808211156144b557600080fd5b6144c186838701614437565b935060208501359150808211156144d757600080fd5b506144e485828601614437565b9150509250929050565b6040815260006145016040830185613ffc565b82810360208401526145138185613ffc565b95945050505050565b60008060006060848603121561453157600080fd5b61453a84614054565b925060208401356001600160401b038082111561455657600080fd5b61456287838801614437565b9350604086013591508082111561457857600080fd5b5061458586828701614437565b9150509250925092565b6000806000606084860312156145a457600080fd5b6145ad84614054565b92506020840135915060408401356001600160401b038111156145cf57600080fd5b61458586828701614437565b600080604083850312156145ee57600080fd5b6145f783614054565b91506020830135801515811461460c57600080fd5b809150509250929050565b60408152600061462a6040830185614130565b82810360208401526145138185614130565b6000806000806080858703121561465257600080fd5b61465b85614054565b935061466960208601614054565b92506040850135915060608501356001600160401b0381111561468b57600080fd5b8501601f8101871361469c57600080fd5b6146ab878235602084016143c2565b91505092959194509250565b604080825283519082018190526000906020906060840190828701845b828110156146f0578151845292840192908401906001016146d4565b505050838103828501526147048186614130565b9695505050505050565b6000806040838503121561472157600080fd5b8235915060208301356001600160401b0381111561473e57600080fd5b6144e485828601614437565b6000806040838503121561475d57600080fd5b61476683614054565b915061313b60208401614054565b6000806020838503121561478757600080fd5b82356001600160401b0381111561479d57600080fd5b6147a98582860161409a565b90969095509350505050565b600181811c908216806147c957607f821691505b602082108114156147ea57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261481d57600080fd5b8301803591506001600160401b0382111561483757600080fd5b6020019150368190038213156140de57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156148765761487661484c565b5060010190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b60208082526030908201527f526576657273655265736f6c7665723a2053454e4445525f49535f4e4f545f4160408201526f28282927ab22a22fa7a92fa7aba722a960811b606082015260800190565b60008251614965818460208701613fd0565b9190910192915050565b60208082526022908201527f546f70206c6576656c20646f6d61696e206d757374206265206e6f6e2d656d70604082015261747960f01b606082015260800190565b60208082526025908201527f446f6d61696e207265717569726573206174206c656173742033206368617261604082015264637465727360d81b606082015260800190565b60208082526035908201527f496e73756666696369656e7420546f6b656e206f7220546f6b656e2076616c7560408201527419481cd95b9d081a5cc81b9bdd0818dbdc9c9958dd605a1b606082015260800190565b60008351614a5d818460208801613fd0565b601760f91b9083019081528351614a7b816001840160208801613fd0565b01600101949350505050565b60208082526028908201527f526576657273655265736f6c7665723a20524556455253455f5245434f52445f60408201526749535f454d50545960c01b606082015260800190565b60008351614ae1818460208801613fd0565b835190830190614af5818360208801613fd0565b01949350505050565b60008351614b10818460208801613fd0565b9190910191825250602001919050565b600082821015614b3257614b3261484c565b500390565b60008219821115614b4a57614b4a61484c565b500190565b8183823760009101908152919050565b600060ff821660ff84168060ff03821115614b7c57614b7c61484c565b019392505050565b6000816000190483118215151615614b9e57614b9e61484c565b500290565b600083516020614bb68285838901613fd0565b601760f91b918401918252845460019060009080831c81841680614bdb57607f821691505b858210811415614bf957634e487b7160e01b84526022600452602484fd5b808015614c0d5760018114614c2257614c53565b60ff1984168887015282880186019450614c53565b60008b81526020902060005b84811015614c495781548a8201890152908701908801614c2e565b5050858389010194505b50929a9950505050505050505050565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061470490830184613ffc565b600060208284031215614cfa57600080fd5b815161114381613f9d565b634e487b7160e01b600052603160045260246000fdfea26469706673582212206feaa28cf8f296c3d29f36820d6c1dc84f1ffe2d824543e95527abf83180d46964736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "get(string,uint256)": {
        "details": "Function to get record.",
        "params": {
          "key": "The key to query the value of.",
          "tokenId": "The token id to fetch."
        },
        "returns": {
          "value": "The value string."
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getByHash(uint256,uint256)": {
        "details": "Function get value by provied key hash.",
        "params": {
          "keyHash": "The key to query the value of.",
          "tokenId": "The token id to set."
        }
      },
      "getMany(string[],uint256)": {
        "details": "Function to get multiple record.",
        "params": {
          "keys": "The keys to query the value of.",
          "tokenId": "The token id to fetch."
        },
        "returns": {
          "values": "The values."
        }
      },
      "getManyByHash(uint256[],uint256)": {
        "details": "Function get values by provied key hashes.",
        "params": {
          "keyHashes": "The key to query the value of.",
          "tokenId": "The token id to set."
        }
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "reconfigure(string[],string[],uint256)": {
        "details": "Reset all domain records and set new ones",
        "params": {
          "keys": "New record keys",
          "tokenId": "ERC-721 token id of the domain",
          "values": "New record values"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "reset(uint256)": {
        "details": "Function to reset all existing records on a domain.",
        "params": {
          "tokenId": "ERC-721 token id to set."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "setByHash(uint256,string,uint256)": {
        "details": "Set record by key hash",
        "params": {
          "keyHash": "The key hash set the value of",
          "tokenId": "ERC-721 token id to set",
          "value": "The value to set key to"
        }
      },
      "setMany(string[],string[],uint256)": {
        "details": "Set records by keys",
        "params": {
          "keys": "The keys set the values of",
          "tokenId": "ERC-721 token id of the domain",
          "values": "Records values"
        }
      },
      "setManyByHash(uint256[],string[],uint256)": {
        "details": "Set records by key hashes",
        "params": {
          "keyHashes": "The key hashes set the values of",
          "tokenId": "ERC-721 token id of the domain",
          "values": "Records values"
        }
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "registerSubDomain(address,uint256,string)": {
        "notice": "End: set and get Reverses"
      },
      "reverseOf(address)": {
        "notice": "Begin: set and get Reverses"
      },
      "set(string,string,uint256)": {
        "notice": "Begin: working with metadata like: avatar, cover, email, phone, address, social ..."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1314,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1316,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1320,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1324,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1328,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1334,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2115,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2119,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2122,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2126,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1032,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2550,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_controllerRoles",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Role)2460_storage"
      },
      {
        "astId": 3657,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_keys",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3922,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_records",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))"
      },
      {
        "astId": 3927,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_tokenPresets",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4417,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_subTokens",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(UintSet)3522_storage)"
      },
      {
        "astId": 4421,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4425,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_tokenReverses",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4429,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_tlds",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 4432,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_nftBaseURI",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 4435,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_saleIsActive",
        "offset": 0,
        "slot": "20",
        "type": "t_bool"
      },
      {
        "astId": 4438,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_price",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 4441,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_3chartimes",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 4444,
        "contract": "contracts/Web3Domains.sol:Web3Domains",
        "label": "_4chartimes",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_string_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(UintSet)3522_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)3522_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Role)2460_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 2459,
            "contract": "contracts/Web3Domains.sol:Web3Domains",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)3064_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3059,
            "contract": "contracts/Web3Domains.sol:Web3Domains",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3063,
            "contract": "contracts/Web3Domains.sol:Web3Domains",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)3522_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3521,
            "contract": "contracts/Web3Domains.sol:Web3Domains",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3064_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}