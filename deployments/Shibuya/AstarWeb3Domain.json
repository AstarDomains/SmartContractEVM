{
  "address": "0xc9e2af6d4EfEa2BDDC2e836F79272b367fAD1712",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "NewResolver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "router",
          "type": "address"
        }
      ],
      "name": "NewRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "tokenUri",
          "type": "string"
        }
      ],
      "name": "NewURI",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "_saleIsActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "_tokenURIs",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "sub",
          "type": "string"
        }
      ],
      "name": "burnSubDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "name": "buyDomain",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "label",
          "type": "string"
        }
      ],
      "name": "genTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTLD",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "isApprovedOrOwner",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "domain",
          "type": "string"
        }
      ],
      "name": "registerDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "sub",
          "type": "string"
        }
      ],
      "name": "registerSubDomain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "resolverOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeMinterRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "setOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "setPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "resolver",
          "type": "address"
        }
      ],
      "name": "setResolver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setSaleState",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_tld",
          "type": "string"
        }
      ],
      "name": "setTLD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "subTokenIdByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "subTokenIdCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0f98687fc2c426d0cef87d57be43f2dd8252a7c3e6f42d401745069170d9e913",
  "receipt": {
    "to": null,
    "from": "0x3b946C2C84a316Fe8821D1662b83AF5521537943",
    "contractAddress": "0xc9e2af6d4EfEa2BDDC2e836F79272b367fAD1712",
    "transactionIndex": 0,
    "gasUsed": "3256817",
    "logsBloom": "0x
    "blockHash": "0x36255d4f131801a8ebb588ffc1ae68491d299b669c6f9e00f2f03dd07c01b427",
    "transactionHash": "0x0f98687fc2c426d0cef87d57be43f2dd8252a7c3e6f42d401745069170d9e913",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1045130,
        "transactionHash": "0x0f98687fc2c426d0cef87d57be43f2dd8252a7c3e6f42d401745069170d9e913",
        "address": "0xc9e2af6d4EfEa2BDDC2e836F79272b367fAD1712",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000003b946c2c84a316fe8821d1662b83af5521537943"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x36255d4f131801a8ebb588ffc1ae68491d299b669c6f9e00f2f03dd07c01b427"
      }
    ],
    "blockNumber": 1045130,
    "cumulativeGasUsed": "3256817",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d86fcb611ee264c5fb86ffc95b8a15a7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"NewResolver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"}],\"name\":\"NewRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"tokenUri\",\"type\":\"string\"}],\"name\":\"NewURI\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"_saleIsActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"_tokenURIs\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"sub\",\"type\":\"string\"}],\"name\":\"burnSubDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"buyDomain\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"label\",\"type\":\"string\"}],\"name\":\"genTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTLD\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"isApprovedOrOwner\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"domain\",\"type\":\"string\"}],\"name\":\"registerDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"sub\",\"type\":\"string\"}],\"name\":\"registerSubDomain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"resolverOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeMinterRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"resolver\",\"type\":\"address\"}],\"name\":\"setResolver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setSaleState\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_tld\",\"type\":\"string\"}],\"name\":\"setTLD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"subTokenIdByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"subTokenIdCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstarWeb3Domain.sol\":\"AstarWeb3Domain\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/AstarWeb3Domain.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Provides information about the current execution context, including the\\r\\n * sender of the transaction and its data. While these are generally available\\r\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\r\\n * manner, since when dealing with meta-transactions the account sending and\\r\\n * paying for execution may not be the actual sender (as far as an application\\r\\n * is concerned).\\r\\n *\\r\\n * This contract is only required for intermediate, library-like contracts.\\r\\n */\\r\\nabstract contract Context {\\r\\n    function _msgSender() internal view virtual returns (address) {\\r\\n        return msg.sender;\\r\\n    }\\r\\n\\r\\n    function _msgData() internal view virtual returns (bytes calldata) {\\r\\n        return msg.data;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which allows children to implement an emergency stop\\r\\n * mechanism that can be triggered by an authorized account.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the\\r\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\r\\n * the functions of your contract. Note that they will not be pausable by\\r\\n * simply including this module, only once the modifiers are put in place.\\r\\n */\\r\\nabstract contract Pausable is Context {\\r\\n    /**\\r\\n     * @dev Emitted when the pause is triggered by `account`.\\r\\n     */\\r\\n    event Paused(address account);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when the pause is lifted by `account`.\\r\\n     */\\r\\n    event Unpaused(address account);\\r\\n\\r\\n    bool private _paused;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract in unpaused state.\\r\\n     */\\r\\n    constructor() {\\r\\n        _paused = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the contract is paused, and false otherwise.\\r\\n     */\\r\\n    function paused() public view virtual returns (bool) {\\r\\n        return _paused;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    modifier whenNotPaused() {\\r\\n        require(!paused(), \\\"Pausable: paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Modifier to make a function callable only when the contract is paused.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    modifier whenPaused() {\\r\\n        require(paused(), \\\"Pausable: not paused\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Triggers stopped state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must not be paused.\\r\\n     */\\r\\n    function _pause() internal virtual whenNotPaused {\\r\\n        _paused = true;\\r\\n        emit Paused(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns to normal state.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The contract must be paused.\\r\\n     */\\r\\n    function _unpause() internal virtual whenPaused {\\r\\n        _paused = false;\\r\\n        emit Unpaused(_msgSender());\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n// CAUTION\\r\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\r\\n// because it relies on the compiler's built in overflow checks.\\r\\n\\r\\n/**\\r\\n * @dev Wrappers over Solidity's arithmetic operations.\\r\\n *\\r\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\r\\n * now has built in overflow checking.\\r\\n */\\r\\nlibrary SafeMath {\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            uint256 c = a + b;\\r\\n            if (c < a) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b > a) return (false, 0);\\r\\n            return (true, a - b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\r\\n            // benefit is lost if 'b' is also tested.\\r\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\r\\n            if (a == 0) return (true, 0);\\r\\n            uint256 c = a * b;\\r\\n            if (c / a != b) return (false, 0);\\r\\n            return (true, c);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a / b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\r\\n        unchecked {\\r\\n            if (b == 0) return (false, 0);\\r\\n            return (true, a % b);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the addition of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `+` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Addition cannot overflow.\\r\\n     */\\r\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a + b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a - b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\r\\n     * overflow.\\r\\n     *\\r\\n     * Counterpart to Solidity's `*` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Multiplication cannot overflow.\\r\\n     */\\r\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a * b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a / b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting when dividing by zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a % b;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\r\\n     * overflow (when the result is negative).\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `-` operator.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - Subtraction cannot overflow.\\r\\n     */\\r\\n    function sub(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b <= a, errorMessage);\\r\\n            return a - b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\r\\n     * division by zero. The result is rounded towards zero.\\r\\n     *\\r\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\r\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\r\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function div(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a / b;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\r\\n     * reverting with custom message when dividing by zero.\\r\\n     *\\r\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\r\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\r\\n     *\\r\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\r\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\r\\n     * invalid opcode to revert (consuming all remaining gas).\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The divisor cannot be zero.\\r\\n     */\\r\\n    function mod(\\r\\n        uint256 a,\\r\\n        uint256 b,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (uint256) {\\r\\n        unchecked {\\r\\n            require(b > 0, errorMessage);\\r\\n            return a % b;\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Interface of the ERC165 standard, as defined in the\\r\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\r\\n *\\r\\n * Implementers can declare support of contract interfaces, which can then be\\r\\n * queried by others ({ERC165Checker}).\\r\\n *\\r\\n * For an implementation, see {ERC165}.\\r\\n */\\r\\ninterface IERC165 {\\r\\n    /**\\r\\n     * @dev Returns true if this contract implements the interface defined by\\r\\n     * `interfaceId`. See the corresponding\\r\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\r\\n     * to learn more about how these ids are created.\\r\\n     *\\r\\n     * This function call must use less than 30 000 gas.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of the {IERC165} interface.\\r\\n *\\r\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\r\\n * for the additional interface id that will be supported. For example:\\r\\n *\\r\\n * ```solidity\\r\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\r\\n * }\\r\\n * ```\\r\\n *\\r\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\r\\n */\\r\\nabstract contract ERC165 is IERC165 {\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\r\\n        return interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title Counters\\r\\n * @author Matt Condon (@shrugs)\\r\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\r\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\r\\n *\\r\\n * Include with `using Counters for Counters.Counter;`\\r\\n */\\r\\nlibrary Counters {\\r\\n    struct Counter {\\r\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\r\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\r\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\r\\n        uint256 _value; // default: 0\\r\\n    }\\r\\n\\r\\n    function current(Counter storage counter) internal view returns (uint256) {\\r\\n        return counter._value;\\r\\n    }\\r\\n\\r\\n    function increment(Counter storage counter) internal {\\r\\n        unchecked {\\r\\n            counter._value += 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function decrement(Counter storage counter) internal {\\r\\n        uint256 value = counter._value;\\r\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\r\\n        unchecked {\\r\\n            counter._value = value - 1;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function reset(Counter storage counter) internal {\\r\\n        counter._value = 0;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev String operations.\\r\\n */\\r\\nlibrary Strings {\\r\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\r\\n     */\\r\\n    function toString(uint256 value) internal pure returns (string memory) {\\r\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\r\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\r\\n\\r\\n        if (value == 0) {\\r\\n            return \\\"0\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        bytes memory buffer = new bytes(digits);\\r\\n        while (value != 0) {\\r\\n            digits -= 1;\\r\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\r\\n            value /= 10;\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\r\\n     */\\r\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\r\\n        if (value == 0) {\\r\\n            return \\\"0x00\\\";\\r\\n        }\\r\\n        uint256 temp = value;\\r\\n        uint256 length = 0;\\r\\n        while (temp != 0) {\\r\\n            length++;\\r\\n            temp >>= 8;\\r\\n        }\\r\\n        return toHexString(value, length);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n     */\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(2 * length + 2);\\r\\n        buffer[0] = \\\"0\\\";\\r\\n        buffer[1] = \\\"x\\\";\\r\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\r\\n            value >>= 4;\\r\\n        }\\r\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\r\\n        return string(buffer);\\r\\n    }\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Collection of functions related to the address type\\r\\n */\\r\\nlibrary Address {\\r\\n    /**\\r\\n     * @dev Returns true if `account` is a contract.\\r\\n     *\\r\\n     * [IMPORTANT]\\r\\n     * ====\\r\\n     * It is unsafe to assume that an address for which this function returns\\r\\n     * false is an externally-owned account (EOA) and not a contract.\\r\\n     *\\r\\n     * Among others, `isContract` will return false for the following\\r\\n     * types of addresses:\\r\\n     *\\r\\n     *  - an externally-owned account\\r\\n     *  - a contract in construction\\r\\n     *  - an address where a contract will be created\\r\\n     *  - an address where a contract lived, but was destroyed\\r\\n     * ====\\r\\n     */\\r\\n    function isContract(address account) internal view returns (bool) {\\r\\n        // This method relies on extcodesize, which returns 0 for contracts in\\r\\n        // construction, since the code is only stored at the end of the\\r\\n        // constructor execution.\\r\\n\\r\\n        uint256 size;\\r\\n        assembly {\\r\\n            size := extcodesize(account)\\r\\n        }\\r\\n        return size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\r\\n     * `recipient`, forwarding all available gas and reverting on errors.\\r\\n     *\\r\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\r\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\r\\n     * imposed by `transfer`, making them unable to receive funds via\\r\\n     * `transfer`. {sendValue} removes this limitation.\\r\\n     *\\r\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\r\\n     *\\r\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\r\\n     * taken to not create reentrancy vulnerabilities. Consider using\\r\\n     * {ReentrancyGuard} or the\\r\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\r\\n     */\\r\\n    function sendValue(address payable recipient, uint256 amount) internal {\\r\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\r\\n\\r\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\r\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Performs a Solidity function call using a low level `call`. A\\r\\n     * plain `call` is an unsafe replacement for a function call: use this\\r\\n     * function instead.\\r\\n     *\\r\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\r\\n     * function (like regular Solidity function calls).\\r\\n     *\\r\\n     * Returns the raw returned data. To convert to the expected return value,\\r\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `target` must be a contract.\\r\\n     * - calling `target` with `data` must not revert.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\r\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, 0, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but also transferring `value` wei to `target`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - the calling contract must have an ETH balance of at least `value`.\\r\\n     * - the called Solidity function must be `payable`.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value\\r\\n    ) internal returns (bytes memory) {\\r\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\r\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\r\\n     *\\r\\n     * _Available since v3.1._\\r\\n     */\\r\\n    function functionCallWithValue(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        uint256 value,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\r\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\r\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a static call.\\r\\n     *\\r\\n     * _Available since v3.3._\\r\\n     */\\r\\n    function functionStaticCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal view returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\r\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\r\\n     * but performing a delegate call.\\r\\n     *\\r\\n     * _Available since v3.4._\\r\\n     */\\r\\n    function functionDelegateCall(\\r\\n        address target,\\r\\n        bytes memory data,\\r\\n        string memory errorMessage\\r\\n    ) internal returns (bytes memory) {\\r\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\r\\n\\r\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\r\\n        return verifyCallResult(success, returndata, errorMessage);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\r\\n     * revert reason using the provided one.\\r\\n     *\\r\\n     * _Available since v4.3._\\r\\n     */\\r\\n    function verifyCallResult(\\r\\n        bool success,\\r\\n        bytes memory returndata,\\r\\n        string memory errorMessage\\r\\n    ) internal pure returns (bytes memory) {\\r\\n        if (success) {\\r\\n            return returndata;\\r\\n        } else {\\r\\n            // Look for revert reason and bubble it up if present\\r\\n            if (returndata.length > 0) {\\r\\n                // The easiest way to bubble the revert reason is using memory via assembly\\r\\n\\r\\n                assembly {\\r\\n                    let returndata_size := mload(returndata)\\r\\n                    revert(add(32, returndata), returndata_size)\\r\\n                }\\r\\n            } else {\\r\\n                revert(errorMessage);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (an owner) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the owner account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferOwnership}.\\r\\n *\\r\\n * This module is used through inheritance. It will make available the modifier\\r\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\r\\n * the owner.\\r\\n */\\r\\nabstract contract Ownable is Context {\\r\\n    address private _owner;\\r\\n\\r\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\r\\n     */\\r\\n    constructor() {\\r\\n        _setOwner(_msgSender());\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the current owner.\\r\\n     */\\r\\n    function owner() public view virtual returns (address) {\\r\\n        return _owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the owner.\\r\\n     */\\r\\n    modifier onlyOwner() {\\r\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Leaves the contract without owner. It will not be possible to call\\r\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\r\\n     *\\r\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\r\\n     * thereby removing any functionality that is only available to the owner.\\r\\n     */\\r\\n    function renounceOwnership() public virtual onlyOwner {\\r\\n        _setOwner(address(0));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n     * Can only be called by the current owner.\\r\\n     */\\r\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\r\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\r\\n        _setOwner(newOwner);\\r\\n    }\\r\\n\\r\\n    function _setOwner(address newOwner) private {\\r\\n        address oldOwner = _owner;\\r\\n        _owner = newOwner;\\r\\n        emit OwnershipTransferred(oldOwner, newOwner);\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n\\r\\n/**\\r\\n * @dev Required interface of an ERC721 compliant contract.\\r\\n */\\r\\ninterface IERC721 is IERC165 {\\r\\n    /**\\r\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\r\\n     */\\r\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\r\\n     */\\r\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\r\\n     */\\r\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of tokens in ``owner``'s account.\\r\\n     */\\r\\n    function balanceOf(address owner) external view returns (uint256 balance);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the owner of the `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\r\\n     * The approval is cleared when the token is transferred.\\r\\n     *\\r\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The caller must own the token or be an approved operator.\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits an {Approval} event.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the account approved for `tokenId` token.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\r\\n\\r\\n    /**\\r\\n     * @dev Approve or remove `operator` as an operator for the caller.\\r\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - The `operator` cannot be the caller.\\r\\n     *\\r\\n     * Emits an {ApprovalForAll} event.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool _approved) external;\\r\\n\\r\\n    /**\\r\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\r\\n     *\\r\\n     * See {setApprovalForAll}\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external;\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Metadata is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the token collection name.\\r\\n     */\\r\\n    function name() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the token collection symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\r\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\r\\n */\\r\\ninterface IERC721Enumerable is IERC721 {\\r\\n    /**\\r\\n     * @dev Returns the total amount of tokens stored by the contract.\\r\\n     */\\r\\n    function totalSupply() external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\r\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\r\\n\\r\\n    /**\\r\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\r\\n     * Use along with {totalSupply} to enumerate all tokens.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\r\\n}\\r\\n\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\r\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\r\\n * {ERC721Enumerable}.\\r\\n */\\r\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\r\\n    using Address for address;\\r\\n    using Strings for uint256;\\r\\n\\r\\n    // Token name\\r\\n    string private _name;\\r\\n\\r\\n    // Token symbol\\r\\n    string private _symbol;\\r\\n\\r\\n    // Mapping from token ID to owner address\\r\\n    mapping(uint256 => address) private _owners;\\r\\n\\r\\n    // Mapping owner address to token count\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    // Mapping from token ID to approved address\\r\\n    mapping(uint256 => address) private _tokenApprovals;\\r\\n\\r\\n    // Mapping from owner to operator approvals\\r\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\r\\n     */\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_;\\r\\n        _symbol = symbol_;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721).interfaceId ||\\r\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\r\\n            super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-balanceOf}.\\r\\n     */\\r\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\r\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\r\\n        return _balances[owner];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-ownerOf}.\\r\\n     */\\r\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\r\\n        address owner = _owners[tokenId];\\r\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\r\\n        return owner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-name}.\\r\\n     */\\r\\n    function name() public view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-symbol}.\\r\\n     */\\r\\n    function symbol() public view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Metadata-tokenURI}.\\r\\n     */\\r\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory baseURI = _baseURI();\\r\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\r\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\r\\n     * by default, can be overriden in child contracts.\\r\\n     */\\r\\n    function _baseURI() internal view virtual returns (string memory) {\\r\\n        return \\\"\\\";\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-approve}.\\r\\n     */\\r\\n    function approve(address to, uint256 tokenId) public virtual override {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\r\\n\\r\\n        require(\\r\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\r\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\r\\n        );\\r\\n\\r\\n        _approve(to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-getApproved}.\\r\\n     */\\r\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\r\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\r\\n\\r\\n        return _tokenApprovals[tokenId];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-setApprovalForAll}.\\r\\n     */\\r\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\r\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\r\\n\\r\\n        _operatorApprovals[_msgSender()][operator] = approved;\\r\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-isApprovedForAll}.\\r\\n     */\\r\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\r\\n        return _operatorApprovals[owner][operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-transferFrom}.\\r\\n     */\\r\\n    function transferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        //solhint-disable-next-line max-line-length\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n\\r\\n        _transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) public virtual override {\\r\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721-safeTransferFrom}.\\r\\n     */\\r\\n    function safeTransferFrom(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) public virtual override {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\r\\n        _safeTransfer(from, to, tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\r\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\r\\n     *\\r\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\r\\n     *\\r\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\r\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must exist and be owned by `from`.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _transfer(from, to, tokenId);\\r\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `tokenId` exists.\\r\\n     *\\r\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\r\\n     *\\r\\n     * Tokens start existing when they are minted (`_mint`),\\r\\n     * and stop existing when they are burned (`_burn`).\\r\\n     */\\r\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\r\\n        return _owners[tokenId] != address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     */\\r\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\r\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\r\\n        _safeMint(to, tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\r\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\r\\n     */\\r\\n    function _safeMint(\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) internal virtual {\\r\\n        _mint(to, tokenId);\\r\\n        require(\\r\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\r\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Mints `tokenId` and transfers it to `to`.\\r\\n     *\\r\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must not exist.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _mint(address to, uint256 tokenId) internal virtual {\\r\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\r\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\r\\n\\r\\n        _beforeTokenTransfer(address(0), to, tokenId);\\r\\n\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(address(0), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Destroys `tokenId`.\\r\\n     * The approval is cleared when the token is burned.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `tokenId` must exist.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _burn(uint256 tokenId) internal virtual {\\r\\n        address owner = ERC721.ownerOf(tokenId);\\r\\n\\r\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\r\\n\\r\\n        // Clear approvals\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[owner] -= 1;\\r\\n        delete _owners[tokenId];\\r\\n\\r\\n        emit Transfer(owner, address(0), tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers `tokenId` from `from` to `to`.\\r\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `to` cannot be the zero address.\\r\\n     * - `tokenId` token must be owned by `from`.\\r\\n     *\\r\\n     * Emits a {Transfer} event.\\r\\n     */\\r\\n    function _transfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {\\r\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\r\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\r\\n\\r\\n        _beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        // Clear approvals from the previous owner\\r\\n        _approve(address(0), tokenId);\\r\\n\\r\\n        _balances[from] -= 1;\\r\\n        _balances[to] += 1;\\r\\n        _owners[tokenId] = to;\\r\\n\\r\\n        emit Transfer(from, to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Approve `to` to operate on `tokenId`\\r\\n     *\\r\\n     * Emits a {Approval} event.\\r\\n     */\\r\\n    function _approve(address to, uint256 tokenId) internal virtual {\\r\\n        _tokenApprovals[tokenId] = to;\\r\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\r\\n     * The call is not executed if the target address is not a contract.\\r\\n     *\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param to target address that will receive the tokens\\r\\n     * @param tokenId uint256 ID of the token to be transferred\\r\\n     * @param _data bytes optional data to send along with the call\\r\\n     * @return bool whether the call correctly returned the expected magic value\\r\\n     */\\r\\n    function _checkOnERC721Received(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId,\\r\\n        bytes memory _data\\r\\n    ) private returns (bool) {\\r\\n        if (to.isContract()) {\\r\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\r\\n                return retval == IERC721Receiver.onERC721Received.selector;\\r\\n            } catch (bytes memory reason) {\\r\\n                if (reason.length == 0) {\\r\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\r\\n                } else {\\r\\n                    assembly {\\r\\n                        revert(add(32, reason), mload(reason))\\r\\n                    }\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            return true;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` and `to` are never both zero.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual {}\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\r\\n    // Mapping from owner to list of owned token IDs\\r\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\r\\n\\r\\n    // Mapping from token ID to index of the owner tokens list\\r\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\r\\n\\r\\n    // Array with all token ids, used for enumeration\\r\\n    uint256[] private _allTokens;\\r\\n\\r\\n    // Mapping from token id to position in the allTokens array\\r\\n    mapping(uint256 => uint256) private _allTokensIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC165-supportsInterface}.\\r\\n     */\\r\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\r\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\r\\n        return _ownedTokens[owner][index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-totalSupply}.\\r\\n     */\\r\\n    function totalSupply() public view virtual override returns (uint256) {\\r\\n        return _allTokens.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\r\\n     */\\r\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\r\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\r\\n        return _allTokens[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Hook that is called before any token transfer. This includes minting\\r\\n     * and burning.\\r\\n     *\\r\\n     * Calling conditions:\\r\\n     *\\r\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\r\\n     * transferred to `to`.\\r\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\r\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\r\\n     * - `from` cannot be the zero address.\\r\\n     * - `to` cannot be the zero address.\\r\\n     *\\r\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\r\\n     */\\r\\n    function _beforeTokenTransfer(\\r\\n        address from,\\r\\n        address to,\\r\\n        uint256 tokenId\\r\\n    ) internal virtual override {\\r\\n        super._beforeTokenTransfer(from, to, tokenId);\\r\\n\\r\\n        if (from == address(0)) {\\r\\n            _addTokenToAllTokensEnumeration(tokenId);\\r\\n        } else if (from != to) {\\r\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\r\\n        }\\r\\n        if (to == address(0)) {\\r\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\r\\n        } else if (to != from) {\\r\\n            _addTokenToOwnerEnumeration(to, tokenId);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\r\\n     * @param to address representing the new owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\r\\n     */\\r\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\r\\n        uint256 length = ERC721.balanceOf(to);\\r\\n        _ownedTokens[to][length] = tokenId;\\r\\n        _ownedTokensIndex[tokenId] = length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\r\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\r\\n     */\\r\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\r\\n        _allTokensIndex[tokenId] = _allTokens.length;\\r\\n        _allTokens.push(tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\r\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\r\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\r\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\r\\n     * @param from address representing the previous owner of the given token ID\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\r\\n     */\\r\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\r\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\r\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary\\r\\n        if (tokenIndex != lastTokenIndex) {\\r\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\r\\n\\r\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n        }\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _ownedTokensIndex[tokenId];\\r\\n        delete _ownedTokens[from][lastTokenIndex];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\r\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\r\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\r\\n     */\\r\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\r\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\r\\n        // then delete the last slot (swap and pop).\\r\\n\\r\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\r\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\r\\n\\r\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\r\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\r\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\r\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\r\\n\\r\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\r\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\r\\n\\r\\n        // This also deletes the contents at the last position of the array\\r\\n        delete _allTokensIndex[tokenId];\\r\\n        _allTokens.pop();\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/**\\r\\n * @title ERC721 token receiver interface\\r\\n * @dev Interface for any contract that wants to support safeTransfers\\r\\n * from ERC721 asset contracts.\\r\\n */\\r\\ninterface IERC721Receiver {\\r\\n    /**\\r\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\r\\n     * by `operator` from `from`, this function is called.\\r\\n     *\\r\\n     * It must return its Solidity selector to confirm the token transfer.\\r\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\r\\n     *\\r\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\r\\n     */\\r\\n    function onERC721Received(\\r\\n        address operator,\\r\\n        address from,\\r\\n        uint256 tokenId,\\r\\n        bytes calldata data\\r\\n    ) external returns (bytes4);\\r\\n}\\r\\n\\r\\n\\r\\nlibrary Roles {\\r\\n    struct Role {\\r\\n        mapping (address => bool) bearer;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Give an account access to this role.\\r\\n     */\\r\\n    function add(Role storage role, address account) internal {\\r\\n        require(!has(role, account), \\\"Roles: account already has role\\\");\\r\\n        role.bearer[account] = true;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Remove an account's access to this role.\\r\\n     */\\r\\n    function remove(Role storage role, address account) internal {\\r\\n        require(has(role, account), \\\"Roles: account does not have role\\\");\\r\\n        role.bearer[account] = false;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Check if an account has this role.\\r\\n     * @return bool\\r\\n     */\\r\\n    function has(Role storage role, address account) internal view returns (bool) {\\r\\n        require(account != address(0), \\\"Roles: account is the zero address\\\");\\r\\n        return role.bearer[account];\\r\\n    }\\r\\n}\\r\\n\\r\\ncontract AdminControl is Ownable {\\r\\n\\r\\n    using Roles for Roles.Role;\\r\\n\\r\\n    Roles.Role private _controllerRoles;\\r\\n\\r\\n\\r\\n    modifier onlyMinterController() {\\r\\n      require (\\r\\n        hasRole(msg.sender), \\r\\n        \\\"AdminControl: sender must has minting role\\\"\\r\\n      );\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    modifier onlyMinter() {\\r\\n      require (\\r\\n        hasRole(msg.sender), \\r\\n        \\\"AdminControl: sender must has minting role\\\"\\r\\n      );\\r\\n      _;\\r\\n    }\\r\\n\\r\\n    constructor() {\\r\\n      _grantRole(msg.sender);\\r\\n    }\\r\\n\\r\\n    function grantMinterRole (address account) public  onlyOwner {\\r\\n      _grantRole(account);\\r\\n    }\\r\\n\\r\\n    function revokeMinterRole (address account) public  onlyOwner {\\r\\n      _revokeRole(account);\\r\\n    }\\r\\n\\r\\n    function hasRole(address account) public view returns (bool) {\\r\\n      return _controllerRoles.has(account);\\r\\n    }\\r\\n    \\r\\n    function _grantRole (address account) internal {\\r\\n      _controllerRoles.add(account);\\r\\n    }\\r\\n\\r\\n    function _revokeRole (address account) internal {\\r\\n      _controllerRoles.remove(account);\\r\\n    }\\r\\n\\r\\n}\\r\\n\\r\\n\\r\\n\\r\\nlibrary StringUtil {\\r\\n\\r\\n    /**\\r\\n     * @dev Return the count of the dot \\\".\\\" in a string\\r\\n    */\\r\\n    function dotCount(string memory s) internal pure returns (uint) {\\r\\n        s; // Don't warn about unused variables\\r\\n        // Starting here means the LSB will be the byte we care about\\r\\n        uint ptr;\\r\\n        uint end;\\r\\n        assembly {\\r\\n            ptr := add(s, 1)\\r\\n            end := add(mload(s), ptr)\\r\\n        }\\r\\n        uint num = 0;\\r\\n        uint len = 0;\\r\\n        for (len; ptr < end; len++) {\\r\\n            uint8 b;\\r\\n            assembly { b := and(mload(ptr), 0xFF) }\\r\\n            if (b == 0x2e) {\\r\\n                num += 1;\\r\\n            }\\r\\n            ptr += 1;\\r\\n        }\\r\\n        return num;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction toLower(string memory str) internal pure returns (string memory) {\\r\\n        bytes memory bStr = bytes(str);\\r\\n        bytes memory bLower = new bytes(bStr.length);\\r\\n        for (uint i = 0; i < bStr.length; i++) {\\r\\n            // Uppercase character...\\r\\n            if ((uint8(bStr[i]) >= 65) && (uint8(bStr[i]) <= 90)) {\\r\\n                // So we add 32 to make it lowercase\\r\\n                bLower[i] = bytes1(uint8(bStr[i]) + 32);\\r\\n            } else {\\r\\n                bLower[i] = bStr[i];\\r\\n            }\\r\\n        }\\r\\n        return string(bLower);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction toHash(string memory _s) internal pure returns (bytes32) {\\r\\n        return keccak256(abi.encode(_s));\\r\\n    }\\r\\n\\r\\n    function isEmpty(string memory _s) internal pure returns (bool) {\\r\\n        return bytes(_s).length == 0;\\r\\n    }\\r\\n\\t\\r\\n\\t function compare(string memory _a, string memory _b) internal pure returns (int) {\\r\\n        bytes memory a = bytes(_a);\\r\\n        bytes memory b = bytes(_b);\\r\\n        uint minLength = a.length;\\r\\n        if (b.length < minLength) minLength = b.length;\\r\\n        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons\\r\\n        for (uint i = 0; i < minLength; i ++)\\r\\n            if (a[i] < b[i])\\r\\n                return -1;\\r\\n            else if (a[i] > b[i])\\r\\n                return 1;\\r\\n        if (a.length < b.length)\\r\\n            return -1;\\r\\n        else if (a.length > b.length)\\r\\n            return 1;\\r\\n        else\\r\\n            return 0;\\r\\n    }\\r\\n    /// @dev Compares two strings and returns true iff they are equal.\\r\\n    function equal(string memory _a, string memory _b) internal pure returns (bool) {\\r\\n        return compare(_a, _b) == 0;\\r\\n    }\\r\\n    /// @dev Finds the index of the first occurrence of _needle in _haystack\\r\\n    function indexOf(string memory _haystack, string memory _needle) internal pure returns (int)\\r\\n    {\\r\\n    \\tbytes memory h = bytes(_haystack);\\r\\n    \\tbytes memory n = bytes(_needle);\\r\\n    \\tif(h.length < 1 || n.length < 1 || (n.length > h.length)) \\r\\n    \\t\\treturn -1;\\r\\n    \\telse if(h.length > (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an \\\"int\\\" type with a max length of (2^128 - 1)\\r\\n    \\t\\treturn -1;\\t\\t\\t\\t\\t\\t\\t\\t\\t\\r\\n    \\telse\\r\\n    \\t{\\r\\n    \\t\\tuint subindex = 0;\\r\\n    \\t\\tfor (uint i = 0; i < h.length; i ++)\\r\\n    \\t\\t{\\r\\n    \\t\\t\\tif (h[i] == n[0]) // found the first char of b\\r\\n    \\t\\t\\t{\\r\\n    \\t\\t\\t\\tsubindex = 1;\\r\\n    \\t\\t\\t\\twhile(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b\\r\\n    \\t\\t\\t\\t{\\r\\n    \\t\\t\\t\\t\\tsubindex++;\\r\\n    \\t\\t\\t\\t}\\t\\r\\n    \\t\\t\\t\\tif(subindex == n.length)\\r\\n    \\t\\t\\t\\t\\treturn int(i);\\r\\n    \\t\\t\\t}\\r\\n    \\t\\t}\\r\\n    \\t\\treturn -1;\\r\\n    \\t}\\t\\r\\n    }\\r\\n\\t\\r\\n\\t\\r\\n}\\r\\n\\r\\nlibrary EnumerableSet {\\r\\n    // To implement this library for multiple types with as little code\\r\\n    // repetition as possible, we write it in terms of a generic Set type with\\r\\n    // bytes32 values.\\r\\n    // The Set implementation uses private functions, and user-facing\\r\\n    // implementations (such as AddressSet) are just wrappers around the\\r\\n    // underlying Set.\\r\\n    // This means that we can only create new EnumerableSets for types that fit\\r\\n    // in bytes32.\\r\\n\\r\\n    struct Set {\\r\\n        // Storage of set values\\r\\n        bytes32[] _values;\\r\\n        // Position of the value in the `values` array, plus 1 because index 0\\r\\n        // means a value is not in the set.\\r\\n        mapping(bytes32 => uint256) _indexes;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\r\\n        if (!_contains(set, value)) {\\r\\n            set._values.push(value);\\r\\n            // The value is stored at length-1, but we add 1 to all indexes\\r\\n            // and use 0 as a sentinel value\\r\\n            set._indexes[value] = set._values.length;\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\r\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\r\\n        uint256 valueIndex = set._indexes[value];\\r\\n\\r\\n        if (valueIndex != 0) {\\r\\n            // Equivalent to contains(set, value)\\r\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\r\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\r\\n            // This modifies the order of the array, as noted in {at}.\\r\\n\\r\\n            uint256 toDeleteIndex = valueIndex - 1;\\r\\n            uint256 lastIndex = set._values.length - 1;\\r\\n\\r\\n            if (lastIndex != toDeleteIndex) {\\r\\n                bytes32 lastvalue = set._values[lastIndex];\\r\\n\\r\\n                // Move the last value to the index where the value to delete is\\r\\n                set._values[toDeleteIndex] = lastvalue;\\r\\n                // Update the index for the moved value\\r\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\r\\n            }\\r\\n\\r\\n            // Delete the slot where the moved value was stored\\r\\n            set._values.pop();\\r\\n\\r\\n            // Delete the index for the deleted slot\\r\\n            delete set._indexes[value];\\r\\n\\r\\n            return true;\\r\\n        } else {\\r\\n            return false;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\r\\n        return set._indexes[value] != 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function _length(Set storage set) private view returns (uint256) {\\r\\n        return set._values.length;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\r\\n        return set._values[index];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\r\\n        return set._values;\\r\\n    }\\r\\n\\r\\n    // Bytes32Set\\r\\n\\r\\n    struct Bytes32Set {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _add(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\r\\n        return _remove(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, value);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\r\\n        return _at(set._inner, index);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\r\\n        return _values(set._inner);\\r\\n    }\\r\\n\\r\\n    // AddressSet\\r\\n\\r\\n    struct AddressSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values in the set. O(1).\\r\\n     */\\r\\n    function length(AddressSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\r\\n        return address(uint160(uint256(_at(set._inner, index))));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        address[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n\\r\\n    // UintSet\\r\\n\\r\\n    struct UintSet {\\r\\n        Set _inner;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Add a value to a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was added to the set, that is if it was not\\r\\n     * already present.\\r\\n     */\\r\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _add(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a value from a set. O(1).\\r\\n     *\\r\\n     * Returns true if the value was removed from the set, that is if it was\\r\\n     * present.\\r\\n     */\\r\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\r\\n        return _remove(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns true if the value is in the set. O(1).\\r\\n     */\\r\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\r\\n        return _contains(set._inner, bytes32(value));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the number of values on the set. O(1).\\r\\n     */\\r\\n    function length(UintSet storage set) internal view returns (uint256) {\\r\\n        return _length(set._inner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\r\\n     *\\r\\n     * Note that there are no guarantees on the ordering of values inside the\\r\\n     * array, and it may change when more values are added or removed.\\r\\n     *\\r\\n     * Requirements:\\r\\n     *\\r\\n     * - `index` must be strictly less than {length}.\\r\\n     */\\r\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\r\\n        return uint256(_at(set._inner, index));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Return the entire set in an array\\r\\n     *\\r\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\r\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\r\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\r\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\r\\n     */\\r\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\r\\n        bytes32[] memory store = _values(set._inner);\\r\\n        uint256[] memory result;\\r\\n\\r\\n        assembly {\\r\\n            result := store\\r\\n        }\\r\\n\\r\\n        return result;\\r\\n    }\\r\\n}\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ncontract AstarWeb3Domain is ERC721, ERC721Enumerable, AdminControl \\r\\n{\\r\\n\\tusing EnumerableSet for EnumerableSet.UintSet;  \\r\\n\\t\\r\\n\\tevent NewURI(uint256 indexed tokenId, string tokenUri);\\r\\n\\t\\r\\n    event NewRouter(uint256 indexed tokenId, address indexed router);\\r\\n\\t\\r\\n    event NewResolver(uint256 indexed tokenId, address indexed resolver);\\r\\n\\t\\t\\r\\n\\tmapping (uint256 => EnumerableSet.UintSet) private _subTokens;\\r\\n\\r\\n\\tmapping (uint256 => string) public _tokenURIs;\\r\\n\\r\\n    mapping (uint256 => address) internal _tokenResolvers;\\r\\n\\r\\n\\tstring private _nftBaseURI = \\\"\\\";\\r\\n\\t\\r\\n\\tstring private _TLD = \\\"\\\";\\r\\n\\t\\r\\n\\tbool public _saleIsActive = true;\\r\\n\\r\\n\\tuint256 private _price = 1000000000000000000;\\r\\n\\t\\r\\n    modifier onlyApprovedOrOwner(uint256 tokenId) {\\r\\n        require(\\r\\n            _isApprovedOrOwner(_msgSender(), tokenId)\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    constructor() ERC721(\\\"Astar Web3 Domain (.astr)\\\", \\\"ANWD\\\") {\\r\\n\\t\\t\\r\\n\\t}\\r\\n\\r\\n\\tfunction getPrice() public view returns (uint256) {\\r\\n        return _price;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction getTLD() public view returns (string memory) {\\r\\n        return _TLD;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setPrice(uint256 price) public onlyOwner {\\r\\n        _price = price;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setTLD(string memory _tld) public onlyOwner {\\r\\n        _TLD = _tld;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction setSaleState() public onlyOwner {\\r\\n        _saleIsActive = !_saleIsActive;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction _baseURI() internal view override returns (string memory) {\\r\\n        return _nftBaseURI;\\r\\n    }\\r\\n    \\r\\n    function setBaseURI(string memory _uri) external onlyOwner {\\r\\n        _nftBaseURI = _uri;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction tokenURI(uint256 tokenId) public view override returns (string memory) {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\r\\n\\r\\n        string memory _tokenURI = _tokenURIs[tokenId];\\r\\n\\r\\n        // If there is no base URI, return the token URI.\\r\\n\\t\\tstring memory baseURI = _baseURI();\\r\\n        if (bytes(baseURI).length == 0) {\\r\\n            return _tokenURI;\\r\\n        }\\r\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\r\\n        if (bytes(_tokenURI).length > 0) {\\r\\n            return string(abi.encodePacked(baseURI, _tokenURI));\\r\\n        }\\r\\n        // If there is a baseURI but no tokenURI, concatenate the tokenID to the baseURI.\\r\\n        return string(abi.encodePacked(baseURI, tokenId));\\r\\n    }\\r\\n\\r\\n\\tfunction getOwner(string memory domain) external view returns (address)  {\\r\\n\\t\\tstring memory _domain = StringUtil.toLower(domain);\\r\\n\\t    uint256 tokenId = uint256(keccak256(abi.encodePacked(_domain)));\\r\\n        return ownerOf(tokenId);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction buyDomain(string memory domain) external payable \\r\\n\\t{\\r\\n\\t\\trequire(_saleIsActive, \\\"Sale must be active to buy\\\");\\r\\n\\t\\t\\r\\n\\t\\trequire(bytes(domain).length != 0, \\\"Domain must be non-empty\\\");\\t\\r\\n\\t\\t\\r\\n\\t\\t//require(bytes(_TLD).length != 0, \\\"Top level domain must be non-empty\\\");\\r\\n\\t\\t\\r\\n\\t\\trequire(msg.value >= getPrice(), \\\"Insufficient Token or Token value sent is not correct\\\");\\r\\n\\r\\n\\t\\tstring memory _domain = StringUtil.toLower(domain);\\r\\n\\t\\t\\r\\n\\t\\tuint256 count = StringUtil.dotCount(_domain);\\r\\n\\t\\t\\r\\n\\t\\tif (count > 1)\\r\\n\\t\\t{\\r\\n\\t\\t\\trequire(count <= 1, \\\"Domain not support\\\");\\t\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (count == 0)\\r\\n\\t\\t{\\r\\n\\t\\t\\trequire(bytes(_TLD).length != 0, \\\"Top level domain must be non-empty\\\");\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tint index = StringUtil.indexOf(_domain, _TLD);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif (index == -1)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\t_domain = string(abi.encodePacked(_domain, _TLD));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tuint256 tokenId = uint256(keccak256(abi.encodePacked(_domain)));\\r\\n\\t\\t\\r\\n\\t\\trequire (!_exists(tokenId), \\\"Domain already exists\\\");\\r\\n\\t\\t\\r\\n\\t   _safeMint(msg.sender, tokenId);\\r\\n\\t   \\r\\n\\t   _setTokenURI(tokenId, _domain);\\r\\n\\t   \\r\\n\\t   emit NewURI(tokenId, _domain);\\r\\n    }\\r\\n\\r\\n\\tfunction registerDomain(address to, string memory domain) external onlyOwner {\\r\\n\\t\\trequire(to != address(0));\\r\\n\\t\\t\\r\\n\\t\\trequire(bytes(domain).length != 0, \\\"Domain must be non-empty\\\");\\r\\n\\t\\t\\r\\n\\t\\tstring memory _domain = StringUtil.toLower(domain);\\r\\n\\t\\t\\r\\n\\t\\tuint256 count = StringUtil.dotCount(_domain);\\r\\n\\t\\t\\r\\n\\t\\tif (count > 1)\\r\\n\\t\\t{\\r\\n\\t\\t\\trequire(count <= 1, \\\"Domain not support\\\");\\t\\r\\n\\t\\t}\\r\\n\\t\\t\\r\\n\\t\\tif (count == 0)\\r\\n\\t\\t{\\r\\n\\t\\t\\trequire(bytes(_TLD).length != 0, \\\"Top level domain must be non-empty\\\");\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tint index = StringUtil.indexOf(_domain, _TLD);\\r\\n\\t\\t\\t\\r\\n\\t\\t\\tif (index == -1)\\r\\n\\t\\t\\t{\\r\\n\\t\\t\\t\\t_domain = string(abi.encodePacked(_domain, _TLD));\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\r\\n\\t\\tuint256 tokenId = uint256(keccak256(abi.encodePacked(_domain)));\\r\\n\\t\\t\\r\\n\\t\\trequire (!_exists(tokenId), \\\"Domain already exists\\\");\\r\\n\\t\\t\\r\\n       _safeMint(to, tokenId);\\r\\n\\t   \\r\\n\\t   _setTokenURI(tokenId, _domain);\\r\\n\\t   \\r\\n\\t   emit NewURI(tokenId, _domain);\\r\\n    }\\r\\n\\t\\r\\n    function registerSubDomain(address to, uint256 tokenId, string memory sub) external \\r\\n        onlyApprovedOrOwner(tokenId) \\r\\n    {\\r\\n        _safeMintSubDomain(to, tokenId, sub, \\\"\\\");\\r\\n    }\\r\\n\\t\\t\\r\\n\\tfunction burn(uint256 tokenId) public virtual {\\r\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721Burnable: caller is not owner nor approved\\\");\\r\\n\\t\\t\\r\\n\\t\\tif (bytes(_tokenURIs[tokenId]).length != 0) {\\r\\n            delete _tokenURIs[tokenId];\\r\\n        }\\r\\n\\t\\t\\r\\n\\t\\tif (_tokenResolvers[tokenId] != address(0)) {\\r\\n            delete _tokenResolvers[tokenId];\\r\\n        }\\r\\n\\t\\t\\r\\n        _burn(tokenId);\\r\\n    }\\r\\n\\r\\n\\r\\n    function isApprovedOrOwner(address account, uint256 tokenId) external view returns(bool)  {\\r\\n        return _isApprovedOrOwner(account, tokenId);\\r\\n    }\\r\\n\\r\\n    function setOwner(address to, uint256 tokenId) external onlyApprovedOrOwner(tokenId) {\\r\\n        _transfer(ownerOf(tokenId), to, tokenId);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction exists(uint256 tokenId) external view returns (bool) {\\r\\n        return _exists(tokenId);\\r\\n    }\\r\\n\\r\\n    function setResolver(uint256 tokenId, address resolver) external onlyApprovedOrOwner(tokenId) {\\r\\n        _setResolver(tokenId, resolver);\\r\\n    }\\r\\n\\r\\n    function resolverOf(uint256 tokenId) external view returns (address) {\\r\\n        address resolver = _tokenResolvers[tokenId];\\r\\n        require (resolver != address(0));\\r\\n        return resolver;\\r\\n    }\\r\\n    \\r\\n    function burnSubDomain(uint256 tokenId, string memory sub) external onlyApprovedOrOwner(tokenId) {\\r\\n        _burnSubDomain(tokenId, sub);\\r\\n    }\\r\\n\\r\\n\\t\\r\\n\\tfunction genTokenId(string memory label) public pure returns(uint256)  {\\r\\n        require (bytes(label).length != 0);\\r\\n        return uint256(keccak256(abi.encodePacked(label)));\\r\\n    }\\r\\n\\r\\n   function subTokenIdCount(uint256 tokenId) public view returns (uint256) {\\r\\n        require (_exists(tokenId));\\r\\n        return _subTokens[tokenId].length();\\r\\n    }\\r\\n\\t\\r\\n\\tfunction subTokenIdByIndex(uint256 tokenId, uint256 index) public view returns (uint256) {\\r\\n        require (subTokenIdCount(tokenId) > index);\\r\\n        return _subTokens[tokenId].at(index);\\r\\n    }\\r\\n    \\r\\n  \\r\\n\\t\\r\\n\\tfunction withdraw() external payable onlyOwner {\\r\\n        require(payable(msg.sender).send(address(this).balance));\\r\\n    }\\r\\n\\t\\r\\n    function _safeMintSubDomain(address to, uint256 tokenId, string memory sub, bytes memory _data) internal {\\r\\n\\t\\trequire(to != address(0));\\r\\n        require (bytes(sub).length != 0);\\r\\n        require (StringUtil.dotCount(sub) == 0);\\r\\n        require (_exists(tokenId));\\r\\n\\t\\t\\r\\n\\t\\tstring memory _sub = StringUtil.toLower(sub);\\r\\n\\t\\t\\r\\n        bytes memory _newUri = abi.encodePacked(_sub, \\\".\\\", _tokenURIs[tokenId]);\\r\\n\\t\\t\\r\\n\\t\\tuint256 _newTokenId = genTokenId(string(_newUri));\\r\\n\\r\\n        uint256 count = StringUtil.dotCount(_tokenURIs[tokenId]);\\r\\n\\t\\t\\r\\n        if (count == 1) \\r\\n\\t\\t{\\r\\n            _subTokens[tokenId].add(_newTokenId);\\r\\n        }\\r\\n\\r\\n        if (bytes(_data).length != 0) {\\r\\n            _safeMint(to, _newTokenId, _data);\\r\\n        } else {\\r\\n            _safeMint(to, _newTokenId);\\r\\n        }\\r\\n        \\r\\n        _setTokenURI(_newTokenId, string(_newUri));\\r\\n\\r\\n        emit NewURI(_newTokenId, string(_newUri));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Burn the tokenURI according the token ID,\\r\\n     * @param tokenId the root tokenId of a tokenURI, \\r\\n     * @param sub the label of a tokenURI should be burn\\r\\n     */\\r\\n    function _burnSubDomain(uint256 tokenId, string memory sub) internal {\\r\\n        string memory _sub = StringUtil.toLower(sub);\\r\\n\\t\\t\\r\\n        bytes memory _newUri = abi.encodePacked(_sub, \\\".\\\", _tokenURIs[tokenId]);\\r\\n\\t\\t\\r\\n\\t\\tuint256 _newTokenId = genTokenId(string(_newUri));\\r\\n        // remove sub tokenIds itself\\r\\n        _subTokens[tokenId].remove(_newTokenId);\\r\\n\\r\\n        if (_tokenResolvers[tokenId] != address(0)) {\\r\\n            delete _tokenResolvers[tokenId];\\r\\n        }\\r\\n\\t\\t\\r\\n\\t\\tif (bytes(_tokenURIs[_newTokenId]).length != 0) {\\r\\n            delete _tokenURIs[_newTokenId];\\r\\n        }\\r\\n\\t\\t\\r\\n        super._burn(_newTokenId);\\r\\n    }\\r\\n\\r\\n    function _setResolver(uint256 tokenId, address resolver) internal {\\r\\n        require (_exists(tokenId));\\r\\n        _tokenResolvers[tokenId] = resolver;\\r\\n        emit NewResolver(tokenId, resolver);\\r\\n    }\\r\\n\\t\\r\\n\\tfunction _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\r\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI set of nonexistent token\\\");\\r\\n        _tokenURIs[tokenId] = _tokenURI;\\r\\n    }\\r\\n\\t\\r\\n\\tfunction _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override(ERC721, ERC721Enumerable) {\\r\\n\\t\\tsuper._beforeTokenTransfer(from, to, tokenId);\\r\\n\\t}\\r\\n\\r\\n\\tfunction supportsInterface(bytes4 interfaceId) public view override(ERC721, ERC721Enumerable) returns (bool) {\\r\\n\\t\\treturn super.supportsInterface(interfaceId);\\r\\n\\t}\\r\\n}\",\"keccak256\":\"0xbf055b08449c4002751a77a6635cb68f64cef8e3cdbf910bf663f09fd55703b4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040819052600060808190526200001b91600f9162000286565b506040805160208101918290526000908190526200003c9160109162000286565b506011805460ff19166001179055670de0b6b3a76400006012553480156200006357600080fd5b50604080518082018252601981527f4173746172205765623320446f6d61696e20282e617374722900000000000000602080830191825283518085019094526004845263105395d160e21b908401528151919291620000c59160009162000286565b508051620000db90600190602084019062000286565b505050620000f8620000f26200010960201b60201c565b6200010d565b62000103336200015f565b62000369565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6200017a81600b6200017d60201b62001a731790919060201c565b50565b62000189828262000201565b15620001dc5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c650060448201526064015b60405180910390fd5b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160a01b038216620002665760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401620001d3565b506001600160a01b03166000908152602091909152604090205460ff1690565b82805462000294906200032c565b90600052602060002090601f016020900481019282620002b8576000855562000303565b82601f10620002d357805160ff191683800117855562000303565b8280016001018555821562000303579182015b8281111562000303578251825591602001919060010190620002e6565b506200031192915062000315565b5090565b5b8082111562000311576000815560010162000316565b600181811c908216806200034157607f821691505b602082108114156200036357634e487b7160e01b600052602260045260246000fd5b50919050565b61372c80620003796000396000f3fe6080604052600436106102725760003560e01c80635d893ba01161014f57806398a60243116100c1578063b88d4fde1161007a578063b88d4fde14610723578063bc7b6d6214610743578063c479a80414610763578063c87b56dd14610783578063e985e9c5146107a3578063f2fde38b146107ec57600080fd5b806398a602431461066e57806398d5fdca1461068e578063a22cb465146106a3578063ab3b87fe146106c3578063ad59e226146106e3578063b3f9e4cb1461070357600080fd5b806376f909ae1161011357806376f909ae146105c65780637ef09bca146105e65780638da5cb5b146106065780638f55ee791461062457806391b7f5ed1461063957806395d89b411461065957600080fd5b80635d893ba0146105375780636352211e1461055157806369e2f0fb1461057157806370a0823114610591578063715018a6146105b157600080fd5b80633ccfd60b116101e85780634aaf4a12116101ac5780634aaf4a12146104775780634f558e79146104975780634f6ccce7146104b75780635040ddf2146104d757806350b3a144146104f757806355f804b31461051757600080fd5b80633ccfd60b146103ef5780633dd1eb61146103f757806342842e0e1461041757806342966c6814610437578063430c20811461045757600080fd5b806318160ddd1161023a57806318160ddd146103485780631c3b028e146103675780631ed405591461037a57806323b872dd1461038f5780632dc50d9a146103af5780632f745c59146103cf57600080fd5b806301ffc9a71461027757806306fdde03146102ac578063081812fc146102ce578063095ea7b3146103065780630bb78ec114610328575b600080fd5b34801561028357600080fd5b50610297610292366004612f19565b61080c565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102c161081d565b6040516102a39190612f8e565b3480156102da57600080fd5b506102ee6102e9366004612fa1565b6108af565b6040516001600160a01b0390911681526020016102a3565b34801561031257600080fd5b50610326610321366004612fd6565b61093c565b005b34801561033457600080fd5b506102c1610343366004612fa1565b610a52565b34801561035457600080fd5b506008545b6040519081526020016102a3565b6103266103753660046130ac565b610aec565b34801561038657600080fd5b50610326610e2a565b34801561039b57600080fd5b506103266103aa3660046130e1565b610e68565b3480156103bb57600080fd5b506103596103ca36600461311d565b610e9a565b3480156103db57600080fd5b506103596103ea366004612fd6565b610ecf565b610326610f65565b34801561040357600080fd5b5061032661041236600461313f565b610fb5565b34801561042357600080fd5b506103266104323660046130e1565b610feb565b34801561044357600080fd5b50610326610452366004612fa1565b611006565b34801561046357600080fd5b50610297610472366004612fd6565b6110ee565b34801561048357600080fd5b506102ee6104923660046130ac565b6110fa565b3480156104a357600080fd5b506102976104b2366004612fa1565b611147565b3480156104c357600080fd5b506103596104d2366004612fa1565b611152565b3480156104e357600080fd5b506103266104f236600461315a565b6111e5565b34801561050357600080fd5b506103596105123660046130ac565b61141c565b34801561052357600080fd5b506103266105323660046130ac565b61145c565b34801561054357600080fd5b506011546102979060ff1681565b34801561055d57600080fd5b506102ee61056c366004612fa1565b61149d565b34801561057d57600080fd5b5061032661058c36600461313f565b611514565b34801561059d57600080fd5b506103596105ac36600461313f565b611547565b3480156105bd57600080fd5b506103266115ce565b3480156105d257600080fd5b506103596105e1366004612fa1565b611602565b3480156105f257600080fd5b5061029761060136600461313f565b61162d565b34801561061257600080fd5b50600a546001600160a01b03166102ee565b34801561063057600080fd5b506102c161163a565b34801561064557600080fd5b50610326610654366004612fa1565b611649565b34801561066557600080fd5b506102c1611678565b34801561067a57600080fd5b506103266106893660046131a8565b611687565b34801561069a57600080fd5b50601254610359565b3480156106af57600080fd5b506103266106be3660046131ff565b6116bb565b3480156106cf57600080fd5b506103266106de366004612fd6565b611780565b3480156106ef57600080fd5b506103266106fe3660046130ac565b6117a6565b34801561070f57600080fd5b506102ee61071e366004612fa1565b6117e3565b34801561072f57600080fd5b5061032661073e36600461323b565b611805565b34801561074f57600080fd5b5061032661075e3660046132b7565b611837565b34801561076f57600080fd5b5061032661077e3660046132e3565b611854565b34801561078f57600080fd5b506102c161079e366004612fa1565b611871565b3480156107af57600080fd5b506102976107be366004613314565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156107f857600080fd5b5061032661080736600461313f565b6119db565b600061081782611aef565b92915050565b60606000805461082c9061333e565b80601f01602080910402602001604051908101604052809291908181526020018280546108589061333e565b80156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b5050505050905090565b60006108ba82611b14565b6109205760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006109478261149d565b9050806001600160a01b0316836001600160a01b031614156109b55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610917565b336001600160a01b03821614806109d157506109d181336107be565b610a435760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610917565b610a4d8383611b31565b505050565b600d6020526000908152604090208054610a6b9061333e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a979061333e565b8015610ae45780601f10610ab957610100808354040283529160200191610ae4565b820191906000526020600020905b815481529060010190602001808311610ac757829003601f168201915b505050505081565b60115460ff16610b3e5760405162461bcd60e51b815260206004820152601a60248201527f53616c65206d7573742062652061637469766520746f206275790000000000006044820152606401610917565b8051610b875760405162461bcd60e51b8152602060048201526018602482015277446f6d61696e206d757374206265206e6f6e2d656d70747960401b6044820152606401610917565b601254341015610bf75760405162461bcd60e51b815260206004820152603560248201527f496e73756666696369656e7420546f6b656e206f7220546f6b656e2076616c7560448201527419481cd95b9d081a5cc81b9bdd0818dbdc9c9958dd605a1b6064820152608401610917565b6000610c0282611b9f565b90506000610c0f82611d02565b90506001811115610c60576001811115610c605760405162461bcd60e51b8152602060048201526012602482015271111bdb585a5b881b9bdd081cdd5c1c1bdc9d60721b6044820152606401610917565b80610d5c5760108054610c729061333e565b15159050610c925760405162461bcd60e51b815260040161091790613379565b6000610d288360108054610ca59061333e565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd19061333e565b8015610d1e5780601f10610cf357610100808354040283529160200191610d1e565b820191906000526020600020905b815481529060010190602001808311610d0157829003601f168201915b5050505050611d61565b9050806000191415610d5a57826010604051602001610d48929190613455565b60405160208183030381529060405292505b505b600082604051602001610d6f919061347c565b6040516020818303038152906040528051906020012060001c9050610d9381611b14565b15610dd85760405162461bcd60e51b8152602060048201526015602482015274446f6d61696e20616c72656164792065786973747360581b6044820152606401610917565b610de23382611ed4565b610dec8184611eee565b807fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c395284604051610e1c9190612f8e565b60405180910390a250505050565b600a546001600160a01b03163314610e545760405162461bcd60e51b815260040161091790613498565b6011805460ff19811660ff90911615179055565b610e73335b82611f77565b610e8f5760405162461bcd60e51b8152600401610917906134cd565b610a4d83838361205d565b600081610ea684611602565b11610eb057600080fd5b6000838152600c60205260409020610ec89083612208565b9392505050565b6000610eda83611547565b8210610f3c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610917565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610f8f5760405162461bcd60e51b815260040161091790613498565b60405133904780156108fc02916000818181858888f19350505050610fb357600080fd5b565b600a546001600160a01b03163314610fdf5760405162461bcd60e51b815260040161091790613498565b610fe881612214565b50565b610a4d83838360405180602001604052806000815250611805565b61100f33610e6d565b6110745760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610917565b6000818152600d60205260409020805461108d9061333e565b1590506110ab576000818152600d602052604081206110ab91612e30565b6000818152600e60205260409020546001600160a01b0316156110e5576000818152600e6020526040902080546001600160a01b03191690555b610fe88161221f565b6000610ec88383611f77565b60008061110683611b9f565b905060008160405160200161111b919061347c565b6040516020818303038152906040528051906020012060001c905061113f8161149d565b949350505050565b600061081782611b14565b600061115d60085490565b82106111c05760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610917565b600882815481106111d3576111d361351e565b90600052602060002001549050919050565b600a546001600160a01b0316331461120f5760405162461bcd60e51b815260040161091790613498565b6001600160a01b03821661122257600080fd5b805161126b5760405162461bcd60e51b8152602060048201526018602482015277446f6d61696e206d757374206265206e6f6e2d656d70747960401b6044820152606401610917565b600061127682611b9f565b9050600061128382611d02565b905060018111156112d45760018111156112d45760405162461bcd60e51b8152602060048201526012602482015271111bdb585a5b881b9bdd081cdd5c1c1bdc9d60721b6044820152606401610917565b8061134d57601080546112e69061333e565b151590506113065760405162461bcd60e51b815260040161091790613379565b60006113198360108054610ca59061333e565b905080600019141561134b57826010604051602001611339929190613455565b60405160208183030381529060405292505b505b600082604051602001611360919061347c565b6040516020818303038152906040528051906020012060001c905061138481611b14565b156113c95760405162461bcd60e51b8152602060048201526015602482015274446f6d61696e20616c72656164792065786973747360581b6044820152606401610917565b6113d38582611ed4565b6113dd8184611eee565b807fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c39528460405161140d9190612f8e565b60405180910390a25050505050565b600081516000141561142d57600080fd5b8160405160200161143e919061347c565b60408051601f19818403018152919052805160209091012092915050565b600a546001600160a01b031633146114865760405162461bcd60e51b815260040161091790613498565b805161149990600f906020840190612e6a565b5050565b6000818152600260205260408120546001600160a01b0316806108175760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610917565b600a546001600160a01b0316331461153e5760405162461bcd60e51b815260040161091790613498565b610fe8816122c6565b60006001600160a01b0382166115b25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610917565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146115f85760405162461bcd60e51b815260040161091790613498565b610fb360006122d1565b600061160d82611b14565b61161657600080fd5b6000828152600c6020526040902061081790612323565b6000610817600b8361232d565b60606010805461082c9061333e565b600a546001600160a01b031633146116735760405162461bcd60e51b815260040161091790613498565b601255565b60606001805461082c9061333e565b8161169133610e6d565b61169a57600080fd5b6116b5848484604051806020016040528060008152506123b0565b50505050565b6001600160a01b0382163314156117145760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610917565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b8061178a33610e6d565b61179357600080fd5b610a4d61179f8361149d565b848461205d565b600a546001600160a01b031633146117d05760405162461bcd60e51b815260040161091790613498565b8051611499906010906020840190612e6a565b6000818152600e60205260408120546001600160a01b03168061081757600080fd5b61180f3383611f77565b61182b5760405162461bcd60e51b8152600401610917906134cd565b6116b58484848461257d565b8161184133610e6d565b61184a57600080fd5b610a4d83836125b0565b8161185e33610e6d565b61186757600080fd5b610a4d838361261b565b606061187c82611b14565b6118e05760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610917565b6000828152600d6020526040812080546118f99061333e565b80601f01602080910402602001604051908101604052809291908181526020018280546119259061333e565b80156119725780601f1061194757610100808354040283529160200191611972565b820191906000526020600020905b81548152906001019060200180831161195557829003601f168201915b505050505090506000611983612708565b9050805160001415611996575092915050565b8151156119c85780826040516020016119b0929190613534565b60405160208183030381529060405292505050919050565b80846040516020016119b0929190613563565b600a546001600160a01b03163314611a055760405162461bcd60e51b815260040161091790613498565b6001600160a01b038116611a6a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610917565b610fe8816122d1565b611a7d828261232d565b15611aca5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610917565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160e01b0319821663780e9d6360e01b1480610817575061081782612717565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b668261149d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008290506000815167ffffffffffffffff811115611bc257611bc2613000565b6040519080825280601f01601f191660200182016040528015611bec576020820181803683370190505b50905060005b8251811015611cfa576041838281518110611c0f57611c0f61351e565b016020015160f81c10801590611c3f5750605a838281518110611c3457611c3461351e565b016020015160f81c11155b15611ca157828181518110611c5657611c5661351e565b602001015160f81c60f81b60f81c6020611c70919061359b565b60f81b828281518110611c8557611c8561351e565b60200101906001600160f81b031916908160001a905350611ce8565b828181518110611cb357611cb361351e565b602001015160f81c60f81b828281518110611cd057611cd061351e565b60200101906001600160f81b031916908160001a9053505b80611cf2816135c0565b915050611bf2565b509392505050565b805160009060018381019184010182805b82841015611d5857835160ff16602e811415611d3757611d346001846135db565b92505b611d426001866135db565b9450508080611d50906135c0565b915050611d13565b50949350505050565b81516000908390839060011180611d79575060018151105b80611d85575081518151115b15611d965760001992505050610817565b6fffffffffffffffffffffffffffffffff82511115611dbb5760001992505050610817565b6000805b8351811015611ec65782600081518110611ddb57611ddb61351e565b602001015160f81c60f81b6001600160f81b031916848281518110611e0257611e0261351e565b01602001516001600160f81b0319161415611eb457600191505b825182108015611e3557508351611e3383836135db565b105b8015611e895750828281518110611e4e57611e4e61351e565b01602001516001600160f81b03191684611e6884846135db565b81518110611e7857611e7861351e565b01602001516001600160f81b031916145b15611ea05781611e98816135c0565b925050611e1c565b8251821415611eb457935061081792505050565b80611ebe816135c0565b915050611dbf565b506000199350505050610817565b611499828260405180602001604052806000815250612767565b611ef782611b14565b611f585760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610917565b6000828152600d602090815260409091208251610a4d92840190612e6a565b6000611f8282611b14565b611fe35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610917565b6000611fee8361149d565b9050806001600160a01b0316846001600160a01b031614806120295750836001600160a01b031661201e846108af565b6001600160a01b0316145b8061113f57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff1661113f565b826001600160a01b03166120708261149d565b6001600160a01b0316146120d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610917565b6001600160a01b03821661213a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610917565b61214583838361279a565b612150600082611b31565b6001600160a01b03831660009081526003602052604081208054600192906121799084906135f3565b90915550506001600160a01b03821660009081526003602052604081208054600192906121a79084906135db565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610ec883836127a5565b610fe8600b82611a73565b600061222a8261149d565b90506122388160008461279a565b612243600083611b31565b6001600160a01b038116600090815260036020526040812080546001929061226c9084906135f3565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610fe8600b826127cf565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610817825490565b60006001600160a01b0382166123905760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610917565b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b0384166123c357600080fd5b81516123ce57600080fd5b6123d782611d02565b156123e157600080fd5b6123ea83611b14565b6123f357600080fd5b60006123fe83611b9f565b9050600081600d600087815260200190815260200160002060405160200161242792919061360a565b604051602081830303815290604052905060006124438261141c565b905060006124eb600d600089815260200190815260200160002080546124689061333e565b80601f01602080910402602001604051908101604052809291908181526020018280546124949061333e565b80156124e15780601f106124b6576101008083540402835291602001916124e1565b820191906000526020600020905b8154815290600101906020018083116124c457829003601f168201915b5050505050611d02565b90508060011415612510576000878152600c6020526040902061250e9083612851565b505b84511561252757612522888387612767565b612531565b6125318883611ed4565b61253b8284611eee565b817fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c39528460405161256b9190612f8e565b60405180910390a25050505050505050565b61258884848461205d565b6125948484848461285d565b6116b55760405162461bcd60e51b815260040161091790613634565b6125b982611b14565b6125c257600080fd5b6000828152600e602052604080822080546001600160a01b0319166001600160a01b0385169081179091559051909184917fcbae0978f0621ebb4707a96540f8d3a937104526ceef2cdf1cf07b25c5e48cd49190a35050565b600061262682611b9f565b9050600081600d600086815260200190815260200160002060405160200161264f92919061360a565b6040516020818303038152906040529050600061266b8261141c565b6000868152600c60205260409020909150612686908261295b565b506000858152600e60205260409020546001600160a01b0316156126c1576000858152600e6020526040902080546001600160a01b03191690555b6000818152600d6020526040902080546126da9061333e565b1590506126f8576000818152600d602052604081206126f891612e30565b6127018161221f565b5050505050565b6060600f805461082c9061333e565b60006001600160e01b031982166380ac58cd60e01b148061274857506001600160e01b03198216635b5e139f60e01b145b8061081757506301ffc9a760e01b6001600160e01b0319831614610817565b6127718383612967565b61277e600084848461285d565b610a4d5760405162461bcd60e51b815260040161091790613634565b610a4d838383612aa6565b60008260000182815481106127bc576127bc61351e565b9060005260206000200154905092915050565b6127d9828261232d565b61282f5760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401610917565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6000610ec88383612b5e565b60006001600160a01b0384163b1561295057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906128a1903390899088908890600401613686565b6020604051808303816000875af19250505080156128dc575060408051601f3d908101601f191682019092526128d9918101906136c3565b60015b612936573d80801561290a576040519150601f19603f3d011682016040523d82523d6000602084013e61290f565b606091505b50805161292e5760405162461bcd60e51b815260040161091790613634565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061113f565b506001949350505050565b6000610ec88383612bad565b6001600160a01b0382166129bd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610917565b6129c681611b14565b15612a135760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610917565b612a1f6000838361279a565b6001600160a01b0382166000908152600360205260408120805460019290612a489084906135db565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038316612b0157612afc81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612b24565b816001600160a01b0316836001600160a01b031614612b2457612b248382612ca0565b6001600160a01b038216612b3b57610a4d81612d3d565b826001600160a01b0316826001600160a01b031614610a4d57610a4d8282612dec565b6000818152600183016020526040812054612ba557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610817565b506000610817565b60008181526001830160205260408120548015612c96576000612bd16001836135f3565b8554909150600090612be5906001906135f3565b9050818114612c4a576000866000018281548110612c0557612c0561351e565b9060005260206000200154905080876000018481548110612c2857612c2861351e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c5b57612c5b6136e0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610817565b6000915050610817565b60006001612cad84611547565b612cb791906135f3565b600083815260076020526040902054909150808214612d0a576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612d4f906001906135f3565b60008381526009602052604081205460088054939450909284908110612d7757612d7761351e565b906000526020600020015490508060088381548110612d9857612d9861351e565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612dd057612dd06136e0565b6001900381819060005260206000200160009055905550505050565b6000612df783611547565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b508054612e3c9061333e565b6000825580601f10612e4c575050565b601f016020900490600052602060002090810190610fe89190612eee565b828054612e769061333e565b90600052602060002090601f016020900481019282612e985760008555612ede565b82601f10612eb157805160ff1916838001178555612ede565b82800160010185558215612ede579182015b82811115612ede578251825591602001919060010190612ec3565b50612eea929150612eee565b5090565b5b80821115612eea5760008155600101612eef565b6001600160e01b031981168114610fe857600080fd5b600060208284031215612f2b57600080fd5b8135610ec881612f03565b60005b83811015612f51578181015183820152602001612f39565b838111156116b55750506000910152565b60008151808452612f7a816020860160208601612f36565b601f01601f19169290920160200192915050565b602081526000610ec86020830184612f62565b600060208284031215612fb357600080fd5b5035919050565b80356001600160a01b0381168114612fd157600080fd5b919050565b60008060408385031215612fe957600080fd5b612ff283612fba565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561303157613031613000565b604051601f8501601f19908116603f0116810190828211818310171561305957613059613000565b8160405280935085815286868601111561307257600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261309d57600080fd5b610ec883833560208501613016565b6000602082840312156130be57600080fd5b813567ffffffffffffffff8111156130d557600080fd5b61113f8482850161308c565b6000806000606084860312156130f657600080fd5b6130ff84612fba565b925061310d60208501612fba565b9150604084013590509250925092565b6000806040838503121561313057600080fd5b50508035926020909101359150565b60006020828403121561315157600080fd5b610ec882612fba565b6000806040838503121561316d57600080fd5b61317683612fba565b9150602083013567ffffffffffffffff81111561319257600080fd5b61319e8582860161308c565b9150509250929050565b6000806000606084860312156131bd57600080fd5b6131c684612fba565b925060208401359150604084013567ffffffffffffffff8111156131e957600080fd5b6131f58682870161308c565b9150509250925092565b6000806040838503121561321257600080fd5b61321b83612fba565b91506020830135801515811461323057600080fd5b809150509250929050565b6000806000806080858703121561325157600080fd5b61325a85612fba565b935061326860208601612fba565b925060408501359150606085013567ffffffffffffffff81111561328b57600080fd5b8501601f8101871361329c57600080fd5b6132ab87823560208401613016565b91505092959194509250565b600080604083850312156132ca57600080fd5b823591506132da60208401612fba565b90509250929050565b600080604083850312156132f657600080fd5b82359150602083013567ffffffffffffffff81111561319257600080fd5b6000806040838503121561332757600080fd5b61333083612fba565b91506132da60208401612fba565b600181811c9082168061335257607f821691505b6020821081141561337357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526022908201527f546f70206c6576656c20646f6d61696e206d757374206265206e6f6e2d656d70604082015261747960f01b606082015260800190565b8054600090600181811c90808316806133d557607f831692505b60208084108214156133f757634e487b7160e01b600052602260045260246000fd5b81801561340b576001811461341c57613449565b60ff19861689528489019650613449565b60008881526020902060005b868110156134415781548b820152908501908301613428565b505084890196505b50505050505092915050565b60008351613467818460208801612f36565b613473818401856133bb565b95945050505050565b6000825161348e818460208701612f36565b9190910192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008351613546818460208801612f36565b83519083019061355a818360208801612f36565b01949350505050565b60008351613575818460208801612f36565b9190910191825250602001919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff038211156135b8576135b8613585565b019392505050565b60006000198214156135d4576135d4613585565b5060010190565b600082198211156135ee576135ee613585565b500190565b60008282101561360557613605613585565b500390565b6000835161361c818460208801612f36565b601760f91b90830190815261347360018201856133bb565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906136b990830184612f62565b9695505050505050565b6000602082840312156136d557600080fd5b8151610ec881612f03565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ce6ca512aa8a004b693b688202ecb6ac1120449f7db146c168c34388179c8c4e64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106102725760003560e01c80635d893ba01161014f57806398a60243116100c1578063b88d4fde1161007a578063b88d4fde14610723578063bc7b6d6214610743578063c479a80414610763578063c87b56dd14610783578063e985e9c5146107a3578063f2fde38b146107ec57600080fd5b806398a602431461066e57806398d5fdca1461068e578063a22cb465146106a3578063ab3b87fe146106c3578063ad59e226146106e3578063b3f9e4cb1461070357600080fd5b806376f909ae1161011357806376f909ae146105c65780637ef09bca146105e65780638da5cb5b146106065780638f55ee791461062457806391b7f5ed1461063957806395d89b411461065957600080fd5b80635d893ba0146105375780636352211e1461055157806369e2f0fb1461057157806370a0823114610591578063715018a6146105b157600080fd5b80633ccfd60b116101e85780634aaf4a12116101ac5780634aaf4a12146104775780634f558e79146104975780634f6ccce7146104b75780635040ddf2146104d757806350b3a144146104f757806355f804b31461051757600080fd5b80633ccfd60b146103ef5780633dd1eb61146103f757806342842e0e1461041757806342966c6814610437578063430c20811461045757600080fd5b806318160ddd1161023a57806318160ddd146103485780631c3b028e146103675780631ed405591461037a57806323b872dd1461038f5780632dc50d9a146103af5780632f745c59146103cf57600080fd5b806301ffc9a71461027757806306fdde03146102ac578063081812fc146102ce578063095ea7b3146103065780630bb78ec114610328575b600080fd5b34801561028357600080fd5b50610297610292366004612f19565b61080c565b60405190151581526020015b60405180910390f35b3480156102b857600080fd5b506102c161081d565b6040516102a39190612f8e565b3480156102da57600080fd5b506102ee6102e9366004612fa1565b6108af565b6040516001600160a01b0390911681526020016102a3565b34801561031257600080fd5b50610326610321366004612fd6565b61093c565b005b34801561033457600080fd5b506102c1610343366004612fa1565b610a52565b34801561035457600080fd5b506008545b6040519081526020016102a3565b6103266103753660046130ac565b610aec565b34801561038657600080fd5b50610326610e2a565b34801561039b57600080fd5b506103266103aa3660046130e1565b610e68565b3480156103bb57600080fd5b506103596103ca36600461311d565b610e9a565b3480156103db57600080fd5b506103596103ea366004612fd6565b610ecf565b610326610f65565b34801561040357600080fd5b5061032661041236600461313f565b610fb5565b34801561042357600080fd5b506103266104323660046130e1565b610feb565b34801561044357600080fd5b50610326610452366004612fa1565b611006565b34801561046357600080fd5b50610297610472366004612fd6565b6110ee565b34801561048357600080fd5b506102ee6104923660046130ac565b6110fa565b3480156104a357600080fd5b506102976104b2366004612fa1565b611147565b3480156104c357600080fd5b506103596104d2366004612fa1565b611152565b3480156104e357600080fd5b506103266104f236600461315a565b6111e5565b34801561050357600080fd5b506103596105123660046130ac565b61141c565b34801561052357600080fd5b506103266105323660046130ac565b61145c565b34801561054357600080fd5b506011546102979060ff1681565b34801561055d57600080fd5b506102ee61056c366004612fa1565b61149d565b34801561057d57600080fd5b5061032661058c36600461313f565b611514565b34801561059d57600080fd5b506103596105ac36600461313f565b611547565b3480156105bd57600080fd5b506103266115ce565b3480156105d257600080fd5b506103596105e1366004612fa1565b611602565b3480156105f257600080fd5b5061029761060136600461313f565b61162d565b34801561061257600080fd5b50600a546001600160a01b03166102ee565b34801561063057600080fd5b506102c161163a565b34801561064557600080fd5b50610326610654366004612fa1565b611649565b34801561066557600080fd5b506102c1611678565b34801561067a57600080fd5b506103266106893660046131a8565b611687565b34801561069a57600080fd5b50601254610359565b3480156106af57600080fd5b506103266106be3660046131ff565b6116bb565b3480156106cf57600080fd5b506103266106de366004612fd6565b611780565b3480156106ef57600080fd5b506103266106fe3660046130ac565b6117a6565b34801561070f57600080fd5b506102ee61071e366004612fa1565b6117e3565b34801561072f57600080fd5b5061032661073e36600461323b565b611805565b34801561074f57600080fd5b5061032661075e3660046132b7565b611837565b34801561076f57600080fd5b5061032661077e3660046132e3565b611854565b34801561078f57600080fd5b506102c161079e366004612fa1565b611871565b3480156107af57600080fd5b506102976107be366004613314565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156107f857600080fd5b5061032661080736600461313f565b6119db565b600061081782611aef565b92915050565b60606000805461082c9061333e565b80601f01602080910402602001604051908101604052809291908181526020018280546108589061333e565b80156108a55780601f1061087a576101008083540402835291602001916108a5565b820191906000526020600020905b81548152906001019060200180831161088857829003601f168201915b5050505050905090565b60006108ba82611b14565b6109205760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006109478261149d565b9050806001600160a01b0316836001600160a01b031614156109b55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610917565b336001600160a01b03821614806109d157506109d181336107be565b610a435760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610917565b610a4d8383611b31565b505050565b600d6020526000908152604090208054610a6b9061333e565b80601f0160208091040260200160405190810160405280929190818152602001828054610a979061333e565b8015610ae45780601f10610ab957610100808354040283529160200191610ae4565b820191906000526020600020905b815481529060010190602001808311610ac757829003601f168201915b505050505081565b60115460ff16610b3e5760405162461bcd60e51b815260206004820152601a60248201527f53616c65206d7573742062652061637469766520746f206275790000000000006044820152606401610917565b8051610b875760405162461bcd60e51b8152602060048201526018602482015277446f6d61696e206d757374206265206e6f6e2d656d70747960401b6044820152606401610917565b601254341015610bf75760405162461bcd60e51b815260206004820152603560248201527f496e73756666696369656e7420546f6b656e206f7220546f6b656e2076616c7560448201527419481cd95b9d081a5cc81b9bdd0818dbdc9c9958dd605a1b6064820152608401610917565b6000610c0282611b9f565b90506000610c0f82611d02565b90506001811115610c60576001811115610c605760405162461bcd60e51b8152602060048201526012602482015271111bdb585a5b881b9bdd081cdd5c1c1bdc9d60721b6044820152606401610917565b80610d5c5760108054610c729061333e565b15159050610c925760405162461bcd60e51b815260040161091790613379565b6000610d288360108054610ca59061333e565b80601f0160208091040260200160405190810160405280929190818152602001828054610cd19061333e565b8015610d1e5780601f10610cf357610100808354040283529160200191610d1e565b820191906000526020600020905b815481529060010190602001808311610d0157829003601f168201915b5050505050611d61565b9050806000191415610d5a57826010604051602001610d48929190613455565b60405160208183030381529060405292505b505b600082604051602001610d6f919061347c565b6040516020818303038152906040528051906020012060001c9050610d9381611b14565b15610dd85760405162461bcd60e51b8152602060048201526015602482015274446f6d61696e20616c72656164792065786973747360581b6044820152606401610917565b610de23382611ed4565b610dec8184611eee565b807fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c395284604051610e1c9190612f8e565b60405180910390a250505050565b600a546001600160a01b03163314610e545760405162461bcd60e51b815260040161091790613498565b6011805460ff19811660ff90911615179055565b610e73335b82611f77565b610e8f5760405162461bcd60e51b8152600401610917906134cd565b610a4d83838361205d565b600081610ea684611602565b11610eb057600080fd5b6000838152600c60205260409020610ec89083612208565b9392505050565b6000610eda83611547565b8210610f3c5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610917565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b600a546001600160a01b03163314610f8f5760405162461bcd60e51b815260040161091790613498565b60405133904780156108fc02916000818181858888f19350505050610fb357600080fd5b565b600a546001600160a01b03163314610fdf5760405162461bcd60e51b815260040161091790613498565b610fe881612214565b50565b610a4d83838360405180602001604052806000815250611805565b61100f33610e6d565b6110745760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201526f1b995c881b9bdc88185c1c1c9bdd995960821b6064820152608401610917565b6000818152600d60205260409020805461108d9061333e565b1590506110ab576000818152600d602052604081206110ab91612e30565b6000818152600e60205260409020546001600160a01b0316156110e5576000818152600e6020526040902080546001600160a01b03191690555b610fe88161221f565b6000610ec88383611f77565b60008061110683611b9f565b905060008160405160200161111b919061347c565b6040516020818303038152906040528051906020012060001c905061113f8161149d565b949350505050565b600061081782611b14565b600061115d60085490565b82106111c05760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610917565b600882815481106111d3576111d361351e565b90600052602060002001549050919050565b600a546001600160a01b0316331461120f5760405162461bcd60e51b815260040161091790613498565b6001600160a01b03821661122257600080fd5b805161126b5760405162461bcd60e51b8152602060048201526018602482015277446f6d61696e206d757374206265206e6f6e2d656d70747960401b6044820152606401610917565b600061127682611b9f565b9050600061128382611d02565b905060018111156112d45760018111156112d45760405162461bcd60e51b8152602060048201526012602482015271111bdb585a5b881b9bdd081cdd5c1c1bdc9d60721b6044820152606401610917565b8061134d57601080546112e69061333e565b151590506113065760405162461bcd60e51b815260040161091790613379565b60006113198360108054610ca59061333e565b905080600019141561134b57826010604051602001611339929190613455565b60405160208183030381529060405292505b505b600082604051602001611360919061347c565b6040516020818303038152906040528051906020012060001c905061138481611b14565b156113c95760405162461bcd60e51b8152602060048201526015602482015274446f6d61696e20616c72656164792065786973747360581b6044820152606401610917565b6113d38582611ed4565b6113dd8184611eee565b807fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c39528460405161140d9190612f8e565b60405180910390a25050505050565b600081516000141561142d57600080fd5b8160405160200161143e919061347c565b60408051601f19818403018152919052805160209091012092915050565b600a546001600160a01b031633146114865760405162461bcd60e51b815260040161091790613498565b805161149990600f906020840190612e6a565b5050565b6000818152600260205260408120546001600160a01b0316806108175760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610917565b600a546001600160a01b0316331461153e5760405162461bcd60e51b815260040161091790613498565b610fe8816122c6565b60006001600160a01b0382166115b25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610917565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146115f85760405162461bcd60e51b815260040161091790613498565b610fb360006122d1565b600061160d82611b14565b61161657600080fd5b6000828152600c6020526040902061081790612323565b6000610817600b8361232d565b60606010805461082c9061333e565b600a546001600160a01b031633146116735760405162461bcd60e51b815260040161091790613498565b601255565b60606001805461082c9061333e565b8161169133610e6d565b61169a57600080fd5b6116b5848484604051806020016040528060008152506123b0565b50505050565b6001600160a01b0382163314156117145760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610917565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b8061178a33610e6d565b61179357600080fd5b610a4d61179f8361149d565b848461205d565b600a546001600160a01b031633146117d05760405162461bcd60e51b815260040161091790613498565b8051611499906010906020840190612e6a565b6000818152600e60205260408120546001600160a01b03168061081757600080fd5b61180f3383611f77565b61182b5760405162461bcd60e51b8152600401610917906134cd565b6116b58484848461257d565b8161184133610e6d565b61184a57600080fd5b610a4d83836125b0565b8161185e33610e6d565b61186757600080fd5b610a4d838361261b565b606061187c82611b14565b6118e05760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b6064820152608401610917565b6000828152600d6020526040812080546118f99061333e565b80601f01602080910402602001604051908101604052809291908181526020018280546119259061333e565b80156119725780601f1061194757610100808354040283529160200191611972565b820191906000526020600020905b81548152906001019060200180831161195557829003601f168201915b505050505090506000611983612708565b9050805160001415611996575092915050565b8151156119c85780826040516020016119b0929190613534565b60405160208183030381529060405292505050919050565b80846040516020016119b0929190613563565b600a546001600160a01b03163314611a055760405162461bcd60e51b815260040161091790613498565b6001600160a01b038116611a6a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610917565b610fe8816122d1565b611a7d828261232d565b15611aca5760405162461bcd60e51b815260206004820152601f60248201527f526f6c65733a206163636f756e7420616c72656164792068617320726f6c65006044820152606401610917565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b60006001600160e01b0319821663780e9d6360e01b1480610817575061081782612717565b6000908152600260205260409020546001600160a01b0316151590565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611b668261149d565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b606060008290506000815167ffffffffffffffff811115611bc257611bc2613000565b6040519080825280601f01601f191660200182016040528015611bec576020820181803683370190505b50905060005b8251811015611cfa576041838281518110611c0f57611c0f61351e565b016020015160f81c10801590611c3f5750605a838281518110611c3457611c3461351e565b016020015160f81c11155b15611ca157828181518110611c5657611c5661351e565b602001015160f81c60f81b60f81c6020611c70919061359b565b60f81b828281518110611c8557611c8561351e565b60200101906001600160f81b031916908160001a905350611ce8565b828181518110611cb357611cb361351e565b602001015160f81c60f81b828281518110611cd057611cd061351e565b60200101906001600160f81b031916908160001a9053505b80611cf2816135c0565b915050611bf2565b509392505050565b805160009060018381019184010182805b82841015611d5857835160ff16602e811415611d3757611d346001846135db565b92505b611d426001866135db565b9450508080611d50906135c0565b915050611d13565b50949350505050565b81516000908390839060011180611d79575060018151105b80611d85575081518151115b15611d965760001992505050610817565b6fffffffffffffffffffffffffffffffff82511115611dbb5760001992505050610817565b6000805b8351811015611ec65782600081518110611ddb57611ddb61351e565b602001015160f81c60f81b6001600160f81b031916848281518110611e0257611e0261351e565b01602001516001600160f81b0319161415611eb457600191505b825182108015611e3557508351611e3383836135db565b105b8015611e895750828281518110611e4e57611e4e61351e565b01602001516001600160f81b03191684611e6884846135db565b81518110611e7857611e7861351e565b01602001516001600160f81b031916145b15611ea05781611e98816135c0565b925050611e1c565b8251821415611eb457935061081792505050565b80611ebe816135c0565b915050611dbf565b506000199350505050610817565b611499828260405180602001604052806000815250612767565b611ef782611b14565b611f585760405162461bcd60e51b815260206004820152602c60248201527f4552433732314d657461646174613a2055524920736574206f66206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610917565b6000828152600d602090815260409091208251610a4d92840190612e6a565b6000611f8282611b14565b611fe35760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610917565b6000611fee8361149d565b9050806001600160a01b0316846001600160a01b031614806120295750836001600160a01b031661201e846108af565b6001600160a01b0316145b8061113f57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff1661113f565b826001600160a01b03166120708261149d565b6001600160a01b0316146120d85760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610917565b6001600160a01b03821661213a5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610917565b61214583838361279a565b612150600082611b31565b6001600160a01b03831660009081526003602052604081208054600192906121799084906135f3565b90915550506001600160a01b03821660009081526003602052604081208054600192906121a79084906135db565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6000610ec883836127a5565b610fe8600b82611a73565b600061222a8261149d565b90506122388160008461279a565b612243600083611b31565b6001600160a01b038116600090815260036020526040812080546001929061226c9084906135f3565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610fe8600b826127cf565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000610817825490565b60006001600160a01b0382166123905760405162461bcd60e51b815260206004820152602260248201527f526f6c65733a206163636f756e7420697320746865207a65726f206164647265604482015261737360f01b6064820152608401610917565b506001600160a01b03166000908152602091909152604090205460ff1690565b6001600160a01b0384166123c357600080fd5b81516123ce57600080fd5b6123d782611d02565b156123e157600080fd5b6123ea83611b14565b6123f357600080fd5b60006123fe83611b9f565b9050600081600d600087815260200190815260200160002060405160200161242792919061360a565b604051602081830303815290604052905060006124438261141c565b905060006124eb600d600089815260200190815260200160002080546124689061333e565b80601f01602080910402602001604051908101604052809291908181526020018280546124949061333e565b80156124e15780601f106124b6576101008083540402835291602001916124e1565b820191906000526020600020905b8154815290600101906020018083116124c457829003601f168201915b5050505050611d02565b90508060011415612510576000878152600c6020526040902061250e9083612851565b505b84511561252757612522888387612767565b612531565b6125318883611ed4565b61253b8284611eee565b817fc5beef08f693b11c316c0c8394a377a0033c9cf701b8cd8afd79cecef60c39528460405161256b9190612f8e565b60405180910390a25050505050505050565b61258884848461205d565b6125948484848461285d565b6116b55760405162461bcd60e51b815260040161091790613634565b6125b982611b14565b6125c257600080fd5b6000828152600e602052604080822080546001600160a01b0319166001600160a01b0385169081179091559051909184917fcbae0978f0621ebb4707a96540f8d3a937104526ceef2cdf1cf07b25c5e48cd49190a35050565b600061262682611b9f565b9050600081600d600086815260200190815260200160002060405160200161264f92919061360a565b6040516020818303038152906040529050600061266b8261141c565b6000868152600c60205260409020909150612686908261295b565b506000858152600e60205260409020546001600160a01b0316156126c1576000858152600e6020526040902080546001600160a01b03191690555b6000818152600d6020526040902080546126da9061333e565b1590506126f8576000818152600d602052604081206126f891612e30565b6127018161221f565b5050505050565b6060600f805461082c9061333e565b60006001600160e01b031982166380ac58cd60e01b148061274857506001600160e01b03198216635b5e139f60e01b145b8061081757506301ffc9a760e01b6001600160e01b0319831614610817565b6127718383612967565b61277e600084848461285d565b610a4d5760405162461bcd60e51b815260040161091790613634565b610a4d838383612aa6565b60008260000182815481106127bc576127bc61351e565b9060005260206000200154905092915050565b6127d9828261232d565b61282f5760405162461bcd60e51b815260206004820152602160248201527f526f6c65733a206163636f756e7420646f6573206e6f74206861766520726f6c6044820152606560f81b6064820152608401610917565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6000610ec88383612b5e565b60006001600160a01b0384163b1561295057604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906128a1903390899088908890600401613686565b6020604051808303816000875af19250505080156128dc575060408051601f3d908101601f191682019092526128d9918101906136c3565b60015b612936573d80801561290a576040519150601f19603f3d011682016040523d82523d6000602084013e61290f565b606091505b50805161292e5760405162461bcd60e51b815260040161091790613634565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905061113f565b506001949350505050565b6000610ec88383612bad565b6001600160a01b0382166129bd5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610917565b6129c681611b14565b15612a135760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610917565b612a1f6000838361279a565b6001600160a01b0382166000908152600360205260408120805460019290612a489084906135db565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6001600160a01b038316612b0157612afc81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b612b24565b816001600160a01b0316836001600160a01b031614612b2457612b248382612ca0565b6001600160a01b038216612b3b57610a4d81612d3d565b826001600160a01b0316826001600160a01b031614610a4d57610a4d8282612dec565b6000818152600183016020526040812054612ba557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610817565b506000610817565b60008181526001830160205260408120548015612c96576000612bd16001836135f3565b8554909150600090612be5906001906135f3565b9050818114612c4a576000866000018281548110612c0557612c0561351e565b9060005260206000200154905080876000018481548110612c2857612c2861351e565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080612c5b57612c5b6136e0565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610817565b6000915050610817565b60006001612cad84611547565b612cb791906135f3565b600083815260076020526040902054909150808214612d0a576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612d4f906001906135f3565b60008381526009602052604081205460088054939450909284908110612d7757612d7761351e565b906000526020600020015490508060088381548110612d9857612d9861351e565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612dd057612dd06136e0565b6001900381819060005260206000200160009055905550505050565b6000612df783611547565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b508054612e3c9061333e565b6000825580601f10612e4c575050565b601f016020900490600052602060002090810190610fe89190612eee565b828054612e769061333e565b90600052602060002090601f016020900481019282612e985760008555612ede565b82601f10612eb157805160ff1916838001178555612ede565b82800160010185558215612ede579182015b82811115612ede578251825591602001919060010190612ec3565b50612eea929150612eee565b5090565b5b80821115612eea5760008155600101612eef565b6001600160e01b031981168114610fe857600080fd5b600060208284031215612f2b57600080fd5b8135610ec881612f03565b60005b83811015612f51578181015183820152602001612f39565b838111156116b55750506000910152565b60008151808452612f7a816020860160208601612f36565b601f01601f19169290920160200192915050565b602081526000610ec86020830184612f62565b600060208284031215612fb357600080fd5b5035919050565b80356001600160a01b0381168114612fd157600080fd5b919050565b60008060408385031215612fe957600080fd5b612ff283612fba565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff8084111561303157613031613000565b604051601f8501601f19908116603f0116810190828211818310171561305957613059613000565b8160405280935085815286868601111561307257600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261309d57600080fd5b610ec883833560208501613016565b6000602082840312156130be57600080fd5b813567ffffffffffffffff8111156130d557600080fd5b61113f8482850161308c565b6000806000606084860312156130f657600080fd5b6130ff84612fba565b925061310d60208501612fba565b9150604084013590509250925092565b6000806040838503121561313057600080fd5b50508035926020909101359150565b60006020828403121561315157600080fd5b610ec882612fba565b6000806040838503121561316d57600080fd5b61317683612fba565b9150602083013567ffffffffffffffff81111561319257600080fd5b61319e8582860161308c565b9150509250929050565b6000806000606084860312156131bd57600080fd5b6131c684612fba565b925060208401359150604084013567ffffffffffffffff8111156131e957600080fd5b6131f58682870161308c565b9150509250925092565b6000806040838503121561321257600080fd5b61321b83612fba565b91506020830135801515811461323057600080fd5b809150509250929050565b6000806000806080858703121561325157600080fd5b61325a85612fba565b935061326860208601612fba565b925060408501359150606085013567ffffffffffffffff81111561328b57600080fd5b8501601f8101871361329c57600080fd5b6132ab87823560208401613016565b91505092959194509250565b600080604083850312156132ca57600080fd5b823591506132da60208401612fba565b90509250929050565b600080604083850312156132f657600080fd5b82359150602083013567ffffffffffffffff81111561319257600080fd5b6000806040838503121561332757600080fd5b61333083612fba565b91506132da60208401612fba565b600181811c9082168061335257607f821691505b6020821081141561337357634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526022908201527f546f70206c6576656c20646f6d61696e206d757374206265206e6f6e2d656d70604082015261747960f01b606082015260800190565b8054600090600181811c90808316806133d557607f831692505b60208084108214156133f757634e487b7160e01b600052602260045260246000fd5b81801561340b576001811461341c57613449565b60ff19861689528489019650613449565b60008881526020902060005b868110156134415781548b820152908501908301613428565b505084890196505b50505050505092915050565b60008351613467818460208801612f36565b613473818401856133bb565b95945050505050565b6000825161348e818460208701612f36565b9190910192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008351613546818460208801612f36565b83519083019061355a818360208801612f36565b01949350505050565b60008351613575818460208801612f36565b9190910191825250602001919050565b634e487b7160e01b600052601160045260246000fd5b600060ff821660ff84168060ff038211156135b8576135b8613585565b019392505050565b60006000198214156135d4576135d4613585565b5060010190565b600082198211156135ee576135ee613585565b500190565b60008282101561360557613605613585565b500390565b6000835161361c818460208801612f36565b601760f91b90830190815261347360018201856133bb565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906136b990830184612f62565b9695505050505050565b6000602082840312156136d557600080fd5b8151610ec881612f03565b634e487b7160e01b600052603160045260246000fdfea2646970667358221220ce6ca512aa8a004b693b688202ecb6ac1120449f7db146c168c34388179c8c4e64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1314,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 1316,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1320,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1324,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1328,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1334,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 2115,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 2119,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2122,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 2126,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1032,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 2550,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_controllerRoles",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Role)2460_storage"
      },
      {
        "astId": 3686,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_subTokens",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(UintSet)3522_storage)"
      },
      {
        "astId": 3690,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 3694,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_tokenResolvers",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3697,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_nftBaseURI",
        "offset": 0,
        "slot": "15",
        "type": "t_string_storage"
      },
      {
        "astId": 3700,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_TLD",
        "offset": 0,
        "slot": "16",
        "type": "t_string_storage"
      },
      {
        "astId": 3703,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_saleIsActive",
        "offset": 0,
        "slot": "17",
        "type": "t_bool"
      },
      {
        "astId": 3706,
        "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
        "label": "_price",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(UintSet)3522_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)3522_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Role)2460_storage": {
        "encoding": "inplace",
        "label": "struct Roles.Role",
        "members": [
          {
            "astId": 2459,
            "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
            "label": "bearer",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)3064_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3059,
            "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3063,
            "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)3522_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3521,
            "contract": "contracts/AstarWeb3Domain.sol:AstarWeb3Domain",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3064_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}